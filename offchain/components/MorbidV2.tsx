import {
  Constr,
  Data,
  Lucid,
  MintingPolicy,
  SpendingValidator,
  UTxO,
  applyDoubleCborEncoding,
  applyParamsToScript,
  fromText,
} from "lucid-cardano";
import { useEffect, useState } from "react";
import {
  getAssetMetadata,
  getLatestBlockInfo,
  getScriptCBOR,
  getTxMetadata,
  getTxUTxOs,
} from "../utils/blockfrost";

declare type TokenUTxO = {
  utxo: UTxO;
  initial_mint_tx_hash: string;
  policyID: string;
  assetName: string;
  metadata: any;
};

const MorbidV2 = (props: {
  lucid: Lucid;
  setActionResult: (actionResult: string) => void;
}) => {
  const lucid = props.lucid;
  const setActionResult = props.setActionResult;

  const [loaded, setLoaded] = useState(false);
  const [chestAddress, setChestAddress] = useState("");
  const [resendableChest, setResendableChest] = useState<TokenUTxO>(); // for resending chest lock
  const [keyTokenUTxO, setKeyTokenUTxO] = useState<TokenUTxO>(); // for delaying chest deadline

  useEffect(() => {
    lookForChestAddress();
    lookForResendableChest();
    setLoaded(true);
  }, []);

  const lookForChestAddress = async () => {
    const key = await lookForToken(chestKey.name);
    setKeyTokenUTxO(key);
    setChestAddress(key?.metadata["chest_address"]);
  };

  const lookForResendableChest = async () => {
    setResendableChest(await lookForToken(chestLock.name));
  };

  const lookForToken = async (name: string) => {
    let result: TokenUTxO | undefined;
    if (lucid) {
      const utxos = await lucid.wallet.getUtxos();
      console.log({ utxos: utxos });
      if (!utxos.length) {
        throw { emptyWalletAddress: "No UTxO to look for." };
      }

      const forEachAsync = async (
        utxos: UTxO[],
        callback: { (utxo: UTxO): Promise<void>; (arg0: any): any }
      ) => {
        for (const utxo of utxos) {
          await callback(utxo);
        }
      };

      let foundToken = false;
      const myAsyncCallback = async (utxo: UTxO) => {
        if (foundToken) return;
        let hasToken = false;
        for (const asset in utxo.assets) {
          try {
            if (asset === "lovelace") continue;
            // console.log({ asset: asset, qty: utxo.assets[asset] });
            const assetMetadata = await getAssetMetadata(asset);
            console.log({ assetMetadata: assetMetadata });

            const initial_mint_tx_hash = assetMetadata["initial_mint_tx_hash"];
            const policyID = assetMetadata["policy_id"];
            const assetName = fromText(name);

            if (asset.substring(policyID.length) !== assetName) continue;

            const onchainMetadata =
              assetMetadata["onchain_metadata"] ||
              (await getTxMetadata(initial_mint_tx_hash))["json_metadata"][
                policyID
              ][assetName];
            console.log({ onchainMetadata: onchainMetadata });
            result = {
              utxo: utxo,
              initial_mint_tx_hash: initial_mint_tx_hash,
              policyID: policyID,
              assetName: assetName,
              metadata: onchainMetadata,
            };
            hasToken = true;
            break;
          } catch (x) {
            setActionResult(JSON.stringify(x));
          }
        }
        if (hasToken) {
          foundToken = true;
        }
      };
      await forEachAsync(utxos, myAsyncCallback);
    }
    return result;
  };

  const compiledCode = {
    // // no traces:
    mintChest:
      "59069f010000323232323232323232323222322232533300b333332323232323232323232323232323232322222323232533302600114a0264a66604e00229404c94ccc0a00044c8c8c8c8c8cc06c0048c8c8c94ccc0c4c0d00084c8c8cdc419191919299981a19b8748008c0d4dd5198181819001a40042002266e000052002375a6070002606064a66606666e1d200230320011001163302e303000148000cc88c94ccc0d0cdc3a400000220062a66606866e1d20020011003100230323253330343370e90000008a60103d8798000153330343370e90020008a6103d87b80001533303453330343370e9001181a9baa330303032003480084cdc3a4004606a6ea8cc0c0c0c8009200213330343370e9001181a9baa330303032002480092825114c0103d87a8000153330343370e9001181a9baa33030303200348008530103d87b800014c103d8798000303233223253330363370e9000000899299981b99b8748000004530103d87a800014c103d87980003035002153330363370e9002000899299981b99b8748010004530103d87a800014c103d87b80003035002132323253330393370e90000008a60103d87b8000153330393370e90020008a6103d879800013232533303b337100080022980103d87980001533303b3370e0080022980103d87a800014c103d87b8000375a607e002606e00a606e0086eb4c0f0004c0d000cc0d0008cc0bcc0c400920003302f303100148000cc0b4c0bc00520003302d302f00148008cc0b0c0b8015200e001375a60620046eb8c0bc00458c0c8004c8cc0580048c8c94ccc0c0cdc3a400000226498103d87a8000302e0021323232533303600114c103d87a800013253330370011323253330363370e9002000899191919ba548000cc0f4c8dd39981f181d8009981f181e000a5eb80cdd81ba9008375000297ae0375a00260780026068004298103d87a8000303400133030303200748010530103d87a800030390013233301a0014bd7011119980d8010009111919299981d99b8748008004400c4c8c8cc104dd38008029bac3041001303900230390015333039533303953330393371e00c030266e3c00c074528099b8700248008528099ba548000cc0f4dd39981e9ba90063303d37520066607a6ea120024bd7025eb80530103d87a800037566605c606000a90011bae3036001302e002302e0013302a302c3302a302c001480012000375866050605400290021981398148062400066034002466446602e004466e3cdd71817000801198170029981700225eb7bdb1812210843686573744b657900330190012332233018002337606ea4004dd4240046605a0086605a00697adef6c6000d330184a246466030002466ebccc098c0a0005200000d375866048604c66048604c012900024000605600660540062940c0a8004c0a4004c8c8c8c94ccc098cdc3a4004002297adef6c6013237566058002604800460480026602c0020066602e0029110037566603c60406603c60400069000240106eb8c098004c078c94ccc084cdc3a4000604000220022c66038603c0029001180080091112999810801880109919191919980280080119998040040018030029bae3022003375a6044004604a008604600660020024444a66603e006200426464646466600a002004666601001000600c00a6eb8c08000cdd59810001181180218108019800800911299980e0010a5eb7bdb1804c8c8c8c94ccc074cdc3a4004002266600e00e00600a264646604600266601201200a00e646466ec0c094008c094004c094004dd61811800980d801180d80098018011810001980f0011800800911299980d0010a50132325333019300300214a2266600a00a002006603c00660380046002002444a66603000429404c8c94ccc05ccdd79ba63301b0024bd6f7b6301ba63301b0034bd6f7b6300a511333005005001003301c003301a0023001001222533301600214a026464a66602a600600429444ccc01401400400cc06800cc060008894ccc0440084c0052614a06002002444a6660260042980103d87a800013232323253330143371e00a002266e95200033018374c00497ae01333007007003005375c60280066eacc050008c05c00cc054008c0040048894ccc04400852f5bded8c0264646464a66602466e3c014004400c4cc058cdd81ba9001374c00466600e00e00600a6eb8c04800cdd59809001180a80198098010020030008010a4c2ca66601466e1d2000300b37540042930b1bae00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d11",
    validate:
      "590d96010000323232323232323232323223223222232533300d33333323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323222222323253330463370e90000008991981d0009191919299982718288010991919192999829182a801099192999828a99982899b8f00600213371000a00229404c94ccc1540045280980d000991980e00091919299982c0008a60103d87a800013374a90001982c99982a99198110009919299982c19b87480000044c8dd7182f000982b0010991bae305e001305600230560013305230543305230540034800120003758660a260a601a900826103d87a80004c0103d87980004bd701919812000911299982c299982c19b8f00301813371e00491010843686573744b65790014a0266e9520003305c374e660b86ea400ccc170dd48011982e1ba80014bd7025eb805300103d87a80003756660a060a40029001198279828800a40046eb0cc134c13c025200214a06eb4c148008dd718280008b1829800991980f000919980e8008078081bac33049304b00548010dd698270011bae304c00116304f001323301a00123233301a00100c00d33047304900148008dd6198229823800a400066088608c00a90001981ca51232323232323232325333052305500213232323232325333058305b00213232323304b00123375e01600a660940024666054002006012660929448ccc0a4004020008c8c0b4004ccc0f40112f5bded8c00662c60b200264607e002660800020166eb0c150008dd6182900099191820800998210008041bac3304c304e00948010c8c09c004ccc0dc0112f5bded8c005a2c60a60026460720026607400200a6eb0c138008dd618260009919181d8009981e0009191802000998241825000a40046eb0cc118c12000d20002337606e994ccc128c8c00c004cc118c1200052000137566608c609000290010a5eb7bdb180cc118c120005200023232533304b3370e900100089925130490021324a0609200460920026608a608e002900019821982280224000264646464646466e20004c8c8c8c94ccc140cdc3a400460a26ea8cc130c13800d2002100113370000290011bad3054001304c32533304f3370e9001182700088008b198251826000a4000664464a6660a066e1d20000011003153330503370e900100088018801182719299982819b8748000004530103d8798000153330503370e90020008a6103d87b80001533305053330503370e900118289baa3304c304e003480084cdc3a400460a26ea8cc130c138009200213330503370e900118289baa3304c304e002480092825114c0103d87a8000153330503370e900118289baa3304c304e00348008530103d87b800014c103d8798000304e33223253330523370e9000000899299982999b8748000004530103d87a800014c103d87980003051002153330523370e9002000899299982999b8748010004530103d87a800014c103d87b80003051002132323253330553370e90000008a60103d87b8000153330553370e90020008a6103d8798000132325333057337100080022980103d8798000153330573370e0080022980103d87a800014c103d87b8000375a60b600260a600a60a60086eb4c160004c14000cc140008cc12cc13400920003304b304d00148000cc124c12c005200033049304b00148008cc120c128019200e375a002609e002608e64a66609466e1d20043049001100116330453047330453047001480092004304d00130453253330483370e9000182380088008b1919807000919b87333222323232533304f3370e90010008a40002646eb4c154004c134008c134004c94ccc138cdc3a40040022980103d87a80001323233012001005375660a800260980046098002660200060046eaccc114c11ccc114c11c0052002480080240292002375866086608a0029000198211822001a40006088006608464a66608a66e1d2002304400110011633040304200148008c0040048894ccc10c008530103d87a800013232323253330443371e00a002266e95200033048375000497ae01333007007003005375c60880066eb4c110008c11c00cc114008c0040048894ccc104008530103d87a800013232323253330423371e00a002266e95200033046374c00497ae01333007007003005375c60840066eacc108008c11400cc10c008c0040048894ccc0fc008530103d87a800013232533303e300300213374a90001982100125eb804ccc01401400400cc10c00cc104008c004004894ccc0f000452889919299981d8010998020020008a5030400023370e9001181d1baa303e0013001001222533303b00214bd70099191919299981e19b87480080044ccc01c01c00c0144c8c8cc108ccc0f800530103d87a80004c0103d87980003330090090050073370e9001181f1baa3042001303a002303a0013003002303f003303d0023001001222533303900214a026464a66607066e3c00800c5288999802802800801981e8019bae303b002222323253330373370e900000089926103d87a800030350021323232533303d00114c103d87a8000132533303e00113232533303d3370e9002000899191919ba548000cc110c8dd3998229821000998229821800a5eb80cdd81ba9008375000297ae0375a00260860026076004298103d87a8000303b00133037303900948010530103d87a800030400013233009001222533303d533303d533303d3371e006014266e3c008024528099b8700148008528099ba548000cc104dd3998209ba9003330413752004660826ea120024bd7025eb805300103d87a800037566606a606e00e90011bae303d001303500230350013303130333303130330034800120002233300e0024bd701111998070010009111919299981d99b8748008004400c4c8c8cc104dd38008029bac3041001303900230390013330070060030023001001222533303500214bd6f7b630099191919299981b19b87480080044ccc01c01c00c0144c8c8cc0f0004ccc02402401401cc8c8cdd8181f001181f000981f0009bac303c00130340023034001300300230390033037002222330060022330050020013001001222533303200214a026464a66606266ebcdd38011ba700314a2266600a00a002006606c0066eb0c0d0008c0040048894ccc0c0008528899192999817980180109998028028008018a50303400337586064004466600a00297ae022233300500200122233034374e660686ea4018cc0d0dd48019981a1ba80024bd70000911199802001801000980080091112999816801880109919191919980280080119998040040018030029bae302e003375a605c0046062008605e00644466600800600400260020024444a666054006200426464646466600a002004666601001000600c00a6eb8c0ac00cdd598158011817002181600191199980400100091119299981429998158008a5114a02980103d87a800013374a9000198161ba60014bd70199980380100091119299981599b87001480005300103d87a800013374a9000198179ba80014bd7019b8000200100600322533302333720004002298103d8798000153330233371e0040022980103d87a800014c103d87b800030010012222253330270041003132323232333330090090033333300a007001002006005006005375c60500066eb4c0a0008c0ac014c0a4010c0040048888894ccc0980144cc09ccdd81ba9004375000697adef6c6013232323253330273375e6600a01000298103d879800013302b337606ea4020dd40038048a99981399b8f0080011323253330293370e9000000899191981799bb037520186ea000401cdd6981780098138010802981380099980300400380109981599bb037520026ea0008cccccc02802800c02001c018014dd718138019bad3027002302a006302800530010012222253330230041003132323232333330090090033333300a007001002006005006005375c60480066eacc090008c09c014c094010c0040048888894ccc0880144cc08ccdd81ba9004374c00697adef6c6013232323253330233375e6600a01000298103d8798000133027337606ea4020dd30038048a99981199b8f0080011323253330253370e9000000899191981599bb037520186e9800401cdd5981580098118010802981180099980300400380109981399bb037520026e98008cccccc02802800c02001c018014dd718118019bab302300230260063024005222333004003002223300300100230010012222533301d00310021323233330060060013300300200400330210043756603e006600200244a666032002297ae0132323301c002330040043300500123330193375e00200694128980e801180d8009800800911299980c0010a5eb804c8c94ccc05cc00c0084cc06c008ccc01401400400c4ccc01401400400cc07000cc068008c004004894ccc05400452f7b630101800001018000132323232323232337606e9ccc074dd30020011ba73301d005001375860340046eb0c060004cc01801800cdd5980b001980b001180c801180b8009800800911299980a0010a5eb7bdb1804c8c8cc05cc00c008ccc01401400400cc06000cc058008894ccc03c0084c0052614a000a00e0080020042930b1900199299980699b874800000454ccc040c02c00c526161533300d3370e90010008a99980818058018a4c2c2c60160046eb8004dd700099800800a40004444666600e66e1c00400c0308cccc014014cdc000224004601c0020040044600a6ea80048c00cdd5000ab9a5573aaae7955cfaba05742ae881",
    // mintChest:
    //   "5909e20100003232323232323232323232323222322232533300b3333323232323232323232323232323232323232323232322222323253302932332232373200266603c0046e600052201003302e37526e60c06d2210852656465656d6572003302e37526e61241023a20003302e37526e60c06d2210122003302e37526e60c8c8dcc80099980d00099b81371a002900124410037660026605c6ea4dcc180da450122004bd7024900330280044c0103d8798000132533302d001153330284a0294454cc0a92411d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a0264a66605c0022a6660529405288a99815a4811d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a0264a66605e0022646464646466036002464a666062002294454cc0cd24011773656e745f63686573745f6c6f636b203f2046616c73650014a0646464a666070607600426464a66606a66e20c8c8c8c94ccc0e4cdc3a400460786ea8cc0d4c0dc00d2002100113370000290011bad303f00130353253330383370e9001181b80088008a9981d2492a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001633033303500148000cc88c94ccc0e4cdc3a400000220062a66607266e1d20020011003100230373253330393370e90000008a60103d8798000153330393370e90020008a6103d87b80001533303953330393370e9001181e1baa330353037003480084cdc3a400460786ea8cc0d4c0dc009200213330393370e9001181e1baa330353037002480092825114c0103d87a8000153330393370e9001181e1baa33035303700348008530103d87b800014c103d87980003037332232533303b3370e9000000899299981e19b8748000004530103d87a800014c103d8798000303a0021533303b3370e9002000899299981e19b8748010004530103d87a800014c103d87b8000303a0021323232533303e3370e90000008a60103d87b80001533303e3370e90020008a6103d8798000132325333040337100080022980103d8798000153330403370e0080022980103d87a800014c103d87b8000375a608c002607800a60780086eb4c10c004c0e400cc0e4008cc0d0c0d8009200033034303600148000cc0c8c0d0005200033032303400148008cc0c4c0cc015200e00114a22a6606e920144756e736166655f756e777261702e66696e6974655f73746172745f6f662874786e2e76616c69646974795f72616e676529203c20646561646c696e65203f2046616c73650014a06eb4c0e0008dd7181b0008a9981aa481334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016303900132330160012323253330353370e9000000899260103d87a800030330021323232533303d00114c103d87a8000132533303e00113232533303b3370e9002000899191919ba548000cc110c8dd3998229821000998229821800a5eb80cdd81ba9008375000297ae0375a00260860026072004298103d87a8000303900133035303700748010530103d87a800030400013233301a0014bd7011119980d8010009111919299982019b8748008004400c4c8c8cc120dd38008029bac3048001303e002303e001533303e533303e533303e3371e00c030266e3c00c074528099b8700248008528099ba548000cc110dd3998221ba9006330443752006660886ea120024bd7025eb80530103d87a8000375666066606a00a90011bae303d001303300230330013302f30313302f303100148001200037586605a605e002900219816181700624000660340024664464a666064002294454cc0d12401186d696e7465645f63686573745f6b6579203f2046616c73650014a06602e004466e3cdd7181a8008011981a8029981a80225eb7bdb18122010843686573744b657900330190012332232533303100114a22a660669201196d696e7465645f63686573745f6c6f636b203f2046616c73650014a06603000466ec0dd48009ba848008cc0d0010cc0d000d2f5bded8c001a660309448c94ccc0b80045288a998182481186f6e655f73686f745f6d696e74696e67203f2046616c73650014a06466030002466ebccc0acc0b4005200000d3758660526056660526056012900024000606400660620062a6660549405288a9981624811d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a06062002606000264646464a66605666e1d200200114bd6f7b6300991bab303300130290023029001330160010033301700148900375666046604a66046604a0069000240106eb8c0b4004c08cc94ccc098cdc3a4000604a00220022a660509212a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001633021302300148008c00400488894ccc0a000c40084c8c8c8c8ccc014004008cccc02002000c018014dd718148019bad3029002302c004302a00330010012222533302600310021323232323330050010023333008008003006005375c604e0066eacc09c008c0a8010c0a000cc0040048894ccc08c00852f5bded8c0264646464a66604466e1d20020011333007007003005132323302a0013330090090050073232337606058004605800260580026eb0c0a8004c080008c080004c00c008c09c00cc094008c0040048894ccc08400852809919299980f18018010a511333005005001003302500330230023001001222533301f00214a026464a66603866ebcdd31981100125eb7bdb180dd319811001a5eb7bdb1805288999802802800801981180198108011800800911299980e8010a5013232533301a300300214a2266600a00a0020066042006603e00444a66602c00426002930a503001001222533301a00214c0103d87a800013232323253330193371e00a002266e9520003301f374c00497ae01333007007003005375c60360066eacc06c008c07800cc070008c0040048894ccc06000852f5bded8c0264646464a66602e66e3c014004400c4cc074cdd81ba9001374c00466600e00e00600a6eb8c06400cdd5980c801180e001980d00118008009111299980919b880024800040044c8c8c8cccc01c01c018cdc0802a400466e2ccdc0001299980a99b8800248050520601482b804cdc599b80001533301533710002900a0a40c0290570080219b8600248080cdc1800a404066e3800c0088dcc80098008009111299980a0018800899191999803003000802299980899b87371a006900009b9800213371400666e28010dcc001180c0021b99375c602c00600800c0020042930b299980519b8748000c034dd50010a4c2c6eb8004cc0040052000222233330073370e00200601c4666600a00a66e00011200230100010020022300737540024600a6ea80055cd2b9b5738aae7555cf2ab9f5740ae855d101",
    // validate:
    //   "5912d101000032323232323232323232323223223222232533300d3333332323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232222223253304b332232373200266607c0046e60005221003304f37526e60c0ed2210d4d61796265446561646c696e65003304f37526e61241023a20003304f37526e60c0ed2210122003304f37526e60c8c8dcc80099981d00099b81371a002900124410037660086609e6ea4dcc181da450122004bd7024900132533304b3370e90000008991981d00091929998270008a51153304f49119726573656e745f63686573745f6c6f636b203f2046616c73650014a0646464a6660a860ae004264646464a6660b060b600426464a6660aca6660aca6660ac66e3c0180085288a9982ba48127696e7075745f61646472657373203d3d206f75747075745f61646472657373203f2046616c73650014a02a6660ac66e200140045288a9982ba49236f6c645f646561646c696e65203c206e65775f646561646c696e65203f2046616c73650014a029404c94ccc16c00454ccc15d280a511533058490125666f756e645f63686573745f6b65795f696e5f7265665f696e70757473203f2046616c73650014a02a6660ae6034002294454cc1612401306c6973742e616e64287369676e65645f62795f616c6c5f63686573745f6b65795f686f6c64657229203f2046616c73650014a0646603800246464a6660bc0022980103d87a800013374a90001982f99982d19198110009919299982e99b87480000044c8dd71832000982d8010991bae3064001305b002305b0013305730593305730590034800120003758660ac60b001a900826103d87a80004c0103d87980004bd701919812000911299982ea99982e99b8f00301813371e00491010843686573744b65790014a0266e95200033062374e660c46ea400ccc188dd4801198311ba80014bd7025eb805300103d87a80003756660aa60ae00290011982a182b000a40046eb0cc148c150025200214a06eb4c160008dd7182b0008a9982aa49334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163059001323301e001233301d00100f01037586609c60a000a90021bad3054002375c60a40022a660a29201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163055001323301a00123233301a00100c00d3304c304e00148008dd6198251826000a400066092609600a90001981ca51232533304d00114a22a6609c9201136e6f745f647261696e6564203f2046616c73650014a06464646464646464a6660b060b60042646464646464a6660bc60c20042646464660960024a6660bc66ebc02c0145288a9982fa490e6c203d3d2072203f2046616c73650014a0660940024666054002006012660929448ccc0a4004020008c8c0b4004ccc0f40112f5bded8c00662a660b69201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016305f00132303f0013304000100b375860b40046eb0c160004c8c8c104004cc108004020dd6198289829804a400864604e00266606e00897adef6c6002d1533055491334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630590013230390013303a001005375860a80046eb0c148004c8c8c0ec004cc0f00048c8c010004cc134c13c0052002375866096609a0069000119bb0374ca66609e64600600266096609a002900009bab3304b304d0014800852f5bded8c066096609a002900011919299982819b87480080044c9289827001099250304e002304e0013304a304c00148000cc120c1280112000132533304c00114a22a6609a9211d756e6c6f636b5f61667465725f646561646c696e65203f2046616c73650014a0646464646464a6660a266e20004c8c8c8c94ccc154cdc3a400460ae6ea8cc144c14c00d2002100113370000290011bad305a00130513253330543370e9001182980088008a9982aa492a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163304f305100148000cc88c94ccc154cdc3a400000220062a6660aa66e1d20020011003100230533253330553370e90000008a60103d8798000153330553370e90020008a6103d87b80001533305553330553370e9001182b9baa330513053003480084cdc3a400460ae6ea8cc144c14c009200213330553370e9001182b9baa330513053002480092825114c0103d87a8000153330553370e9001182b9baa33051305300348008530103d87b800014c103d8798000305333223253330573370e9000000899299982c19b8748000004530103d87a800014c103d87980003056002153330573370e9002000899299982c19b8748010004530103d87a800014c103d87b800030560021323232533305a3370e90000008a60103d87b80001533305a3370e90020008a6103d879800013232533305c337100080022980103d87980001533305c3370e0080022980103d87a800014c103d87b8000375a60c200260b000a60b00086eb4c178004c15400cc154008cc140c148009200033050305200148000cc138c14000520003304e305000148008cc134c13c019200e14a22a660a492144756e736166655f756e777261702e66696e6974655f73746172745f6f662874786e2e76616c69646974795f72616e676529203e20646561646c696e65203f2046616c73650014a06eb4004c154004c130c94ccc13ccdc3a4008609c00220022a660a092012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163304a304c3304a304c0014800920043053001304a32533304d3370e9000182600088008a998272492a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e0016323300e00123370e666444646464a6660a866e1d20020011480004c8dd6982d8009829001182900099299982999b8748008004530103d87a80001323233012001005375660b400260a200460a2002660200060046eaccc128c130cc128c130005200248008024029200237586609060940029000198239824801a40006092006608e64a66609466e1d200230490011001153304b49012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001633045304700148008c0040048894ccc1240085300103d87a800013232323253330493371e00a002266e9520003304e375000497ae01333007007003005375c60940066eb4c128008c13400cc12c008c0040048894ccc11c008530103d87a800013232323253330473371e00a002266e9520003304c374c00497ae01333007007003005375c60900066eacc120008c12c00cc124008c0040048894ccc114008530103d87a8000132325333043300300213374a90001982400125eb804ccc01401400400cc12400cc11c008c004004894ccc1080045288991929998200010998020020008a5030460023370e900118201baa30440013001001222533304100214bd70099191919299982099b87480080044ccc01c01c00c0144c8c8cc120ccc10c00530103d87a80004c0103d87980003330090090050073370e900118221baa3048001303f002303f0013003002304500330430023001001222533303f00214a026464a66607a66e3c00800c528899980280280080198218019bae30410022223232533303c3370e900000089926103d87a8000303a0021323232533304300114c103d87a800013253330440011323253330423370e9002000899191919ba548000cc128c8dd3998259824000998259824800a5eb80cdd81ba9008375000297ae0375a00260920026080004298103d87a800030400013303c303e00948010530103d87a8000304600132330090012225333042533304253330423371e006014266e3c008024528099b8700148008528099ba548000cc11cdd3998239ba90033304737520046608e6ea120024bd7025eb805300103d87a8000375666074607800e90011bae3043001303a002303a0013303630383303630380034800120002233300e0024bd701111998070010009111919299982019b8748008004400c4c8c8cc11cdd38008029bac3047001303e002303e0013330070060030023001001222533303b00214bd6f7b630099191919299981d99b87480080044ccc01c01c00c0144c8c8cc108004ccc02402401401cc8c8cdd81822001182200098220009bac3042001303900230390013003002303f003303d00222232533303700114a22a660709211c616c6c5f76616c7565735f6861735f76616c7565203f2046616c73650014a06600c00446600a0040026002002444a66607000429404c8c94ccc0d8cdd79ba7002374e00629444ccc01401400400cc0f000cdd6181d0011800800911299981b0010a511323253330343003002133300500500100314a060740066eb0c0e00088ccc0140052f5c044466600a004002444660746e9ccc0e8dd48031981d1ba90033303a375000497ae000122233300400300200130010012222533303300310021323232323330050010023333008008003006005375c60680066eb4c0d0008c0dc010c0d400c888ccc01000c008004c00400488894ccc0c000c40084c8c8c8c8ccc014004008cccc02002000c018014dd718188019bab30310023034004303200322333300800200122232533302d533303100114a229405300103d87a800013374a9000198191ba60014bd70199980380100091119299981819b87001480005300103d87a800013374a90001981a9ba80014bd7019b8000200100600322533302833720004002298103d8798000153330283371e0040022980103d87a800014c103d87b8000300100122222533302d0041003132323232333330090090033333300a007001002006005006005375c605c0066eb4c0b8008c0c4014c0bc010c0040048888894ccc0b00144cc0b4cdd81ba9004375000697adef6c60132323232533302c3375e6600a01000298103d8798000133031337606ea4020dd40038048a99981619b8f00800113232533302e3370e9000000899191981a99bb037520186ea000401cdd6981a80098160010802981600099980300400380109981899bb037520026ea0008cccccc02802800c02001c018014dd718168019bad302d0023030006302e00530010012222253330290041003132323232333330090090033333300a007001002006005006005375c60540066eacc0a8008c0b4014c0ac010c0040048888894ccc0a00144cc0a4cdd81ba9004374c00697adef6c6013232323253330283375e6600a01000298103d879800013302d337606ea4020dd30038048a99981419b8f00800113232533302a3370e9000000899191981899bb037520186e9800401cdd5981880098140010802981400099980300400380109981699bb037520026e98008cccccc02802800c02001c018014dd718148019bab3029002302c006302a005222333004003002223300300100230010012222533302300310021323233330060060013300300200400330270043756604a006600200244a66603e002297ae013232330220023300400433005001233301e3375e00200694128981180118108009800800911299980f0010a5eb804c8c94ccc070c00c0084cc084008ccc01401400400c4ccc01401400400cc08800cc080008c004004894ccc06c00452f7b630101800001018000132323232323232337606e9ccc08cdd30020011ba733023005001375860400046eb0c078004cc01801800cdd5980e001980e001180f801180e8009800800911299980d0010a5eb7bdb1804c8c8cc074c00c008ccc01401400400cc07800cc070008894ccc0500084c0052614a060020024444a66602866e2000920001001132323233330070070063370200a900119b8b33700004a66602e66e200092014148180520ae013371666e000054ccc05ccdc4000a4028290300a415c0200866e18009202033706002901019b8e0030022373200260020024444a66602a006200226464666600c00c002008a66602666e1cdc6801a400026e600084cdc500199b8a004373000460320086e64dd7180b8018028038020008010a4c2c6400664a66601a66e1d200000115333011300b003149854cc03924011d4578706563746564206e6f206669656c647320666f7220436f6e73747200161533300d3370e90010008a99980898058018a4c2a6601c92011d4578706563746564206e6f206669656c647320666f7220436f6e7374720016153300e4912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300b002375c0026eb8004cc0040052000222233330073370e00200601a4666600a00a66e000112002300f001002002230063754002460086ea80055cd2b9c5573aaae7955cfaba05742ae881",
  };

  const alwaysTrue: MintingPolicy = {
    type: "PlutusV2",
    script:
      "58635861010000323232323232322253330053370e900018031baa001153330054a22930b09912999803a51149858c020c01cdd500099800800a40004444666600a66e1c00400c0208cccc014014cdc0002240046014002004004ae6955ceaab9e5742ae89",
  };
  const alwaysTruePolicy = lucid.utils.validatorToScriptHash(alwaysTrue);
  const alwaysTrueToken1nameStr = "Gold Medallion";
  const alwaysTrueToken1nameHex = fromText(alwaysTrueToken1nameStr);
  const alwaysTrueToken1 = `${alwaysTruePolicy}${alwaysTrueToken1nameHex}`;
  const alwaysTrueToken1metadata = {
    name: alwaysTrueToken1nameStr,
    image: "ipfs://QmbkhhMrYKVUnEufyTGkUwcTWA61Zj9u7Mf2f9iPSw7QBT",
  };
  const alwaysTrueToken2nameStr = "Black Pearl";
  const alwaysTrueToken2nameHex = fromText(alwaysTrueToken2nameStr);
  const alwaysTrueToken2 = `${alwaysTruePolicy}${alwaysTrueToken2nameHex}`;
  const alwaysTrueToken2metadata = {
    name: alwaysTrueToken2nameStr,
    image: "ipfs://QmUZcPgZXPn1emtijgFJMwkFswXE7mwtEXR6mraCYnrASn",
  };

  const voidData = Data.to(new Constr(0, []));

  const action = {
    delayUnlock: Data.to(new Constr(0, [])),
    unlockChest: Data.to(new Constr(1, [])),
  };

  const chestKey = {
    name: "ChestKey",
    image: "ipfs://QmdvFVHauVFw4XTxQMHfsQy4g4zNsxHaNDv1mMw1Fbt3PY",
  };

  const chestLock = {
    name: "Dead Man's Chest",
    image: "ipfs://QmavSMgKNtRFu4wXCucUbC4dNDqwN4TDfBoW6sk7kxj9tE",
  };

  const mintTreasures = async () => {
    try {
      console.log("MintTreasures():");
      if (lucid) {
        const tx = await lucid
          .newTx()
          .attachMintingPolicy(alwaysTrue)
          .mintAssets(
            {
              [alwaysTrueToken1]: BigInt(5),
              [alwaysTrueToken2]: BigInt(5),
            },
            voidData
          )
          .attachMetadata(721, {
            [alwaysTruePolicy]: {
              [alwaysTrueToken1nameHex]: {
                name: alwaysTrueToken1metadata.name,
                image: alwaysTrueToken1metadata.image,
              },
              [alwaysTrueToken2nameHex]: {
                name: alwaysTrueToken2metadata.name,
                image: alwaysTrueToken2metadata.image,
              },
            },
          })
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      console.log(x);
    }
  };

  const createChest = async () => {
    try {
      console.log("CreateChest():");
      if (lucid) {
        const userAddress = await lucid.wallet.address();
        console.log({ userAddress: userAddress });

        const utxos = await lucid.wallet.getUtxos();
        console.log({ utxos: utxos });
        if (!utxos.length) {
          throw { emptyWalletAddress: "No UTxO to consume." };
        }

        const chestHexName = fromText(chestLock.name);
        const chestKeyHexName = fromText(chestKey.name);
        console.log({ lock: chestHexName, key: chestKeyHexName });

        // validator params of `morbid.validator.mint_chest` script
        const mintChestParams = {
          utxoRef: new Constr(0, [
            new Constr(0, [String(utxos[0].txHash)]), // TxHash
            BigInt(utxos[0].outputIndex), // TxIndex
          ]), // OutputReference
          chestName: chestHexName, // AssetName
        };
        const mintChest = applyParamsToScript(compiledCode.mintChest, [
          mintChestParams.utxoRef,
          mintChestParams.chestName,
        ]);
        const mintChestScript: MintingPolicy = {
          type: "PlutusV2",
          script: applyDoubleCborEncoding(mintChest), // cborHex
        };
        const mintChestScriptHash = lucid.utils.validatorToScriptHash({
          type: "PlutusV2",
          script: mintChest,
        }); // used as `policy_id`

        const mintedLockName = `${mintChestScriptHash}${chestHexName}`;
        const mintedKeyName = `${mintChestScriptHash}${chestKeyHexName}`;

        // validator params of `morbid.validator.validate` script
        const chestParams = {
          policyId: mintChestScriptHash, // PolicyId
          chestName: chestHexName, // AssetName
        };
        const chest = applyParamsToScript(compiledCode.validate, [
          chestParams.policyId,
          chestParams.chestName,
        ]);
        const validateScript: SpendingValidator = {
          type: "PlutusV2",
          script: applyDoubleCborEncoding(chest), // cborHex
        };
        const chestAddress = lucid.utils.validatorToAddress({
          type: "PlutusV2",
          script: chest,
        });
        console.log({ chestAddress: chestAddress });

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const tx = await lucid
          .newTx()
          .collectFrom(utxos)
          .attachMintingPolicy(mintChestScript)
          .mintAssets(
            { [mintedLockName]: BigInt(1), [mintedKeyName]: BigInt(2) },
            voidData
          )
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: validateScript },
            {
              lovelace: BigInt(42_000000),
              [mintedLockName]: BigInt(1),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .attachMetadata(721, {
            [mintChestScriptHash]: {
              [chestHexName]: {
                name: chestLock.name,
                image: chestLock.image,
              },
              [chestKeyHexName]: {
                name: `${chestLock.name} - ${chestKey.name}`,
                image: chestKey.image,
                chest_address: chestAddress,
                // ref_hash: utxos[0].txHash, // not needed
                // ref_index: utxos[0].outputIndex,
              },
            },
          })
          .validFrom(time)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const addTreasure = async () => {
    try {
      console.log(`AddTreasure(${chestAddress}):`);
      if (lucid) {
        // await lookForChestAddress(); // setChestAddress already set

        if (!chestAddress?.length) {
          throw { noChestKey: "No ChestKey was found." };
        }

        const tx = await lucid
          .newTx()
          .payToContract(
            chestAddress,
            { inline: voidData }, // still need to put arbitrary INLINE Datum to be redeemable
            {
              lovelace: BigInt(42_000000),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const delayUnlock = async () => {
    try {
      console.log(`DelayUnlock(${chestAddress}):`);
      if (lucid && keyTokenUTxO) {
        const userAddress = await lucid.wallet.address();
        console.log({ userAddress: userAddress });

        const lock = (await lucid.utxosAt(chestAddress)).find(
          (utxo) => utxo.datum && utxo.scriptRef
        );
        console.log({ lock: lock });
        if (!lock) {
          throw { noChestLock: "No ChestLock was found." };
        }

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const lockName = `${keyTokenUTxO.policyID}${fromText(chestLock.name)}`;
        console.log({
          [`${chestLock.name} - ChestLock`]: {
            lovelace: lock.assets["lovelace"],
            [lockName]: lock.assets[lockName],
          },
        });

        const tx = await lucid
          .newTx()
          .readFrom([lock, keyTokenUTxO.utxo])
          .collectFrom([lock], action.delayUnlock)

          // normal case:
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: lock.scriptRef! },
            lock.assets
          )

          // invalid datum:
          // .payToContract(
          //   chestAddress,
          //   { inline: voidData, scriptRef: lock.scriptRef! },
          //   lock.assets
          // )

          // drain by resend chest to another address:
          // .payToAddressWithData(
          //   userAddress, // drain to any address
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   lock.assets
          // )

          // drain `ChestLock` UTxO:
          // .payToContract(
          //   chestAddress, // just resend the lock only
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   { [lockName]: BigInt(lock.assets[lockName]) }
          // )
          // .payToAddress(
          //   userAddress, // drain ADA to any address
          //   { lovelace: BigInt(lock.assets["lovelace"]) }
          // )

          // take-out treasures:
          //   .payToContract(
          //     chestAddress, // just resend the lock and ADA
          //     { inline: datum, scriptRef: lock.scriptRef! },
          //     {
          //       lovelace: BigInt(lock.assets["lovelace"]),
          //       [lockName]: BigInt(lock.assets[lockName]),
          //     }
          //   )
          //   .payToAddress(
          //     userAddress, // steal treasures
          //     {
          //       [alwaysTrueToken1]: BigInt(lock.assets[alwaysTrueToken1]),
          //       [alwaysTrueToken2]: BigInt(lock.assets[alwaysTrueToken2]),
          //     }
          //   )

          // take-out chest lock:
          // .payToContract(
          //   chestAddress,
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   { lovelace: BigInt(lock.assets["lovelace"]) }
          // )
          // .payToAddress(
          //   userAddress, // take-out the lock to any address
          //   { [lockName]: BigInt(lock.assets[lockName]) }
          // )

          .addSigner(userAddress)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const unlockChest = async () => {
    try {
      console.log(`UnlockChest(${chestAddress}):`);
      if (lucid) {
        const utxos = (await lucid.utxosAt(chestAddress)).filter(
          (utxo) => utxo.datum // UTxO must have datum to be redeemable
        );
        console.log({ utxos: utxos });
        if (!utxos?.length) {
          throw { emptyScriptAddress: "No UTxO to redeem." };
        }

        const scriptRef = utxos.find((utxo) => utxo.scriptRef);
        console.log({ scriptRef: scriptRef });
        if (!scriptRef) {
          throw { noScriptRef: "No ScriptRef was found." };
        }

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const tx = await lucid
          .newTx()
          .readFrom([scriptRef])
          .collectFrom(utxos, action.unlockChest)
          .validFrom(time)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const resendChest = async () => {
    try {
      console.log(`ResendChest(${chestAddress}):`);
      if (resendableChest) {
        const initialMintTxUTxOs = await getTxUTxOs(
          resendableChest.initial_mint_tx_hash
        );
        console.log({ initialMintTxUTxOs: initialMintTxUTxOs });

        const oRefScriptHash = initialMintTxUTxOs["outputs"].find(
          (x: any) => x.reference_script_hash
        );
        console.log({ oRefScriptHash: oRefScriptHash });

        const validateScript: SpendingValidator = {
          type: "PlutusV2",
          script: await getScriptCBOR(oRefScriptHash.reference_script_hash), // cborHex
        };
        console.log({ validateScript: validateScript });

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const tx = await lucid
          .newTx()
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: validateScript },
            {
              lovelace: BigInt(42_000000),
              [`${resendableChest.policyID}${resendableChest.assetName}`]:
                BigInt(1),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  return !loaded ? (
    <></>
  ) : (
    <div>
      <div>
        <br />
        <hr />
        <br />
        <div>Mint arbitrary tokens for testing:</div>
        {/* MintTreasures */}
        <button className="btn btn-primary m-5" onClick={mintTreasures}>
          Mint Treasures
        </button>
        <br />
        <br />
        <hr />
        <br />
      </div>

      <div>
        {/* CreateChest */}
        <button className="btn btn-primary m-5" onClick={createChest}>
          Create Chest
        </button>

        {chestAddress?.length ? (
          <>
            {/* AddTreasure */}
            <button className="btn btn-secondary m-5" onClick={addTreasure}>
              Add Treasure
            </button>

            {keyTokenUTxO ? (
              <>
                {/* DelayUnlock */}
                <button className="btn btn-secondary m-5" onClick={delayUnlock}>
                  Delay Unlock
                </button>
              </>
            ) : (
              <></>
            )}

            {/* UnlockChest */}
            <button className="btn btn-secondary m-5" onClick={unlockChest}>
              Unlock Chest
            </button>

            {resendableChest ? (
              <>
                {/* ResendChest */}
                <button className="btn btn-secondary m-5" onClick={resendChest}>
                  Resend Chest
                </button>
              </>
            ) : (
              <></>
            )}

            {/* ChestInfo */}
            <div>{`Current ChestAddress: ${chestAddress}`}</div>
          </>
        ) : (
          <div>I don't remember having any chest currently...</div>
        )}
      </div>
    </div>
  );
};

export default MorbidV2;
