import {
  Constr,
  Data,
  Lucid,
  MintingPolicy,
  SpendingValidator,
  UTxO,
  applyDoubleCborEncoding,
  applyParamsToScript,
  fromText,
} from "lucid-cardano";
import { useEffect, useState } from "react";
import {
  getAssetMetadata,
  getLatestBlockInfo,
  getScriptCBOR,
  getTxMetadata,
  getTxUTxOs,
} from "../utils/blockfrost";

declare type TokenUTxO = {
  utxo: UTxO;
  initial_mint_tx_hash: string;
  policyID: string;
  assetName: string;
  metadata: any;
};

const MorbidV2 = (props: {
  lucid: Lucid;
  setActionResult: (actionResult: string) => void;
}) => {
  const lucid = props.lucid;
  const setActionResult = props.setActionResult;

  const [loaded, setLoaded] = useState(false);
  const [chestAddress, setChestAddress] = useState("");
  const [resendableChest, setResendableChest] = useState<TokenUTxO>(); // for resending chest lock
  const [keyTokenUTxO, setKeyTokenUTxO] = useState<TokenUTxO>(); // for delaying chest deadline

  useEffect(() => {
    lookForChestAddress();
    lookForResendableChest();
    setLoaded(true);
  }, []);

  const lookForChestAddress = async () => {
    const key = await lookForToken(chestKey.name);
    setKeyTokenUTxO(key);
    setChestAddress(key?.metadata["chest_address"]);
  };

  const lookForResendableChest = async () => {
    setResendableChest(await lookForToken(chestLock.name));
  };

  const lookForToken = async (name: string) => {
    let result: TokenUTxO | undefined;
    if (lucid) {
      const utxos = await lucid.wallet.getUtxos();
      console.log({ utxos: utxos });
      if (!utxos.length) {
        throw { emptyWalletAddress: "No UTxO to look for." };
      }

      const forEachAsync = async (
        utxos: UTxO[],
        callback: { (utxo: UTxO): Promise<void>; (arg0: any): any }
      ) => {
        for (const utxo of utxos) {
          await callback(utxo);
        }
      };

      let foundToken = false;
      const myAsyncCallback = async (utxo: UTxO) => {
        if (foundToken) return;
        let hasToken = false;
        for (const asset in utxo.assets) {
          try {
            if (asset === "lovelace") continue;
            // console.log({ asset: asset, qty: utxo.assets[asset] });
            const assetMetadata = await getAssetMetadata(asset);
            console.log({ assetMetadata: assetMetadata });

            const initial_mint_tx_hash = assetMetadata["initial_mint_tx_hash"];
            const policyID = assetMetadata["policy_id"];
            const assetName = fromText(name);

            if (asset.substring(policyID.length) !== assetName) continue;

            const onchainMetadata =
              assetMetadata["onchain_metadata"] ||
              (await getTxMetadata(initial_mint_tx_hash))["json_metadata"][
                policyID
              ][assetName];
            console.log({ onchainMetadata: onchainMetadata });
            result = {
              utxo: utxo,
              initial_mint_tx_hash: initial_mint_tx_hash,
              policyID: policyID,
              assetName: assetName,
              metadata: onchainMetadata,
            };
            hasToken = true;
            break;
          } catch (x) {
            setActionResult(JSON.stringify(x));
          }
        }
        if (hasToken) {
          foundToken = true;
        }
      };
      await forEachAsync(utxos, myAsyncCallback);
    }
    return result;
  };

  const compiledCode = {
    // // no traces:
    mintChest:
      "5905fa010000323232323232323232223222325333009333332323222223253330113370e900018080008999119299980b8008a50132533301800114a0264a66603200226464a66603064646600200200444a66603c00229404c8c94ccc074cdd79809980d8010080a51133004004001302200230200013758601c602c601c602c0122a666030664464646600200200844a66604000229404c8c94ccc07ccdd79ba6330230024bd6f7b6301ba6330230054bd6f7b6300a5113300400400130240023022001337606ea400530010101003301c0023301c0014bd6f7b6300030a99980c1991191980080080191299980f8008a5013232533301e3371e6eb8c07c008014528899802002000981180118108009980e0011980e000a5eb7bdb1812210843686573744b6579001323232533301e3021002133710646464a66603c66e1d2002301d0011323253330203370e900118109baa3017301e004100113370000290011bad3024001301c001163013301b0013322323253330203370e900000088020a99981019b87480080044010400cc078004c8c94ccc080cdc3a4000002298103d8798000153330203370e90020008a6103d87b80001533302053330203370e900118109baa3017301e00413370e900118109baa3017301e00313330203370e900118109baa3017301e0034a09445300103d87a8000153330203370e900118109baa3017301e00414c103d87b800014c103d8798000301e00133223253330213370e9000000899299981119b87480000045300103d87a800014c103d87980003020002153330213370e9002000899299981119b8748010004530103d87a800014c103d87b80003020002132323253330243370e90000008a60103d87b8000153330243370e90020008a6103d8798000132325333026337100080022980103d8798000153330263370e0080022980103d87a800014c103d87b8000375a6054002604400a60440086eb4c09c004c07c00cc07c008c050c070008c050c070004c048c068004c04cc068004c080c084c084c084c084c084c084c084c06400cdd6980e8008b180f80099191980080080111299980f8008a5eb7bdb1804c8c8c8c94ccc080cdc3a400400226600c00c0062646604a6466ec0c09c004c09cc0a0004dd6181300099803803802180f001180f0009919299981019b87480000044c9300103d87a8000301e0021323232533302600114c103d87a800013253330270011323253330263370e9002000899191919ba548000cc0b4c8dd3998171815800998171816000a5eb80cdd81ba9008375000297ae0375a00260580026048004298103d87a800030240013019302200814c103d87a800030290013322323300100100322533302900114bd70099199911191980080080191299981780088018991999111919299981919b8748008004400c4cc0d8c0dcc0c000800cc0c0004ccc03402400c008dd718170009bad302f0013300300330330023031001375c60500026eacc0a4004cc00c00cc0b4008c0ac004dd5980c98100031112999812a999812a99981299b8f00301413371e00402629404cdc3800a400429404cdd2a4000660526e9ccc0a4dd4801998149ba9002330294c10101004bd7025eb805300103d87a8000375c604c002603c004603c0026028603860286038004604600460420026eb0c038c05c004c038c0580245280a5014a0603800660360062940c06c004c068004cc88cc88c94ccc060cdc3a4004002200426eacc074c05800cc058008c8cc00400400c894ccc068004530103d87a8000132323232533301b3371e00e004266e9520003301f374c00297ae0133006006003375660380066eb8c068008c078008c0700052f5bded8c064646600200200444a666032002297adef6c60132323232533301a3371e91100002100313301e337606ea4008dd3000998030030019bab301b003375c6032004603a00460360026eacc060c064c064c064c064c044c024c044010008dd7180b18078008028b180398070009180898091809000918080009180798080008020030008010a4c2ca66601066e1d2000300937540042930b1bae001230053754002460066ea80055cd2ab9d5573caae7d5d02ba15745",
    validate:
      "590c2101000032323232323232323223223222232533300b3333332323232323232323232323232323232323232222223253330243370e9001181180089919299981319b874800000454ccc098c8c8c8c8c8c8c8c94ccc0c4c0d00084c8c8c8c8c8c94ccc0dcc0e80084c94ccc0d4cc08001c00454ccc0d4cc08000401c4cdd78040010a5014a0603c66603800897adef6c6001d16303800130183302200100b375860660046eb0c0c4004c04ccc048dd6180e9816804803980c19980b00225eb7bdb18005c58c0c8004c048cc070004014dd618168011bac302b00132300e3300d00123003302030290013758603a604e006466ec0dd329998149801180e981380089bab301e302700114bd6f7b630180e981380091919299981519b87480080044c928981400109925030280023028001301c3026001301a30240041323232533302c302f0021323232325333030303300213232533302f533302f3371e00c004266e2001400452809929998198008a501323300100100222533303500114a226464a6660680042660080080022940c0e4008cdc3a400460666ea8c0dc004cc88c8cc00400400c894ccc0d800452f5c0264646464a66606e66e1d200200113300600600313303b3330373370e9001181c1baa303c30350024c0103d87a80004c0103d87980003300600600330350013005002303a002303800137586048605a01246464a66606a0022980103d87a800013374a90001981b1998191991191980080080191299981c8008a501323253330383371e00400a29444cc010010004c0f4008dd7181d8009bac303730383038303830383038303830383038303000c323253330343370e900000089bae303930320021375c607260640046064002604c6060604c6060004980103d87a80004c0103d87980004bd70198101bab3026302f001222533303453330343371e00602a266e3c00922010843686573744b65790014a0266e95200033038374e660706ea400ccc0e0dd48011981c1ba80014bd7025eb805300103d87a80003025302e00114a06eb4c0c0008dd718170008b1818800991980c000919980d0008070079bac30193029005375a60580046eb8c0a800458c0b4004c8cc0500048ccc058c078c09c00402802cdd6180d9812800980d18120020a501323253330283370e900018138008991919299981599b8748010c0a80044cdc41bad30303029001323232533302e3370e9001181680089919299981819b8748008c0c4dd5181298170020800899b8000148008dd6981a00098160008b1810981580099911919299981819b8748000004401054ccc0c0cdc3a400400220082006605c0026464a66606066e1d200000114c103d8798000153330303370e90020008a6103d87b80001533303053330303370e900118189baa3025302e00413370e900118189baa3025302e00313330303370e900118189baa3025302e0034a09445300103d87a8000153330303370e900118189baa3025302e00414c103d87b800014c103d8798000302e00133223253330313370e9000000899299981919b87480000045300103d87a800014c103d87980003030002153330313370e9002000899299981919b8748010004530103d87a800014c103d87b80003030002132323253330343370e90000008a60103d87b8000153330343370e90020008a6103d8798000132325333036337100080022980103d8798000153330363370e0080022980103d87a800014c103d87b8000375a6074002606400a60640086eb4c0dc004c0bc00cc0bc008c088c0b0008c088c0b0004c080c0a8004c084c0a8004c0c0c0c4c0c4c0c4c0c4c0c4c0c4c0c4c0a401458c060c0a0c07cc0a0004c0b8004c09800458c8c8cc004004008894ccc0b40045300103d87a800013232533302c3370e66644464664464a66606666e1d200200110021375a60706062006606200464a66606266e1d200200114c103d87a8000132323300100100222533303700114c103d87a800013232323253330383371e014004266e9520003303c375000297ae0133006006003375a60720066eb8c0dc008c0ec008c0e4004dd5981b18178011817800a4000646600200200844a6660680022980103d87a800013232323253330353371e010004266e95200033039374c00297ae01330060060033756606c0066eb8c0d0008c0e0008c0d8004dd5981098151810981500100680724004266e952000330300024bd70099802002000981880118178009bac301b3025001301a302400430240043022001163018302100122323300100100322533302400114bd6f7b6300998129801981300099801001181380098008009129998100008a5ef6c6010180000101800013232323232337606e9ccc098dd30019bac3023001374e6604c0046eb0c090004cc01801800cc08800cdd5981000118120011811000980080091299980f0008a5eb804c8c8cc084008cc010010cc0340048ccc078cdd7800801a504a26044004604000244464666002002008006444a66604200420022666006006604800466446600c0020046eacc08c00800488c8ccc00400400c0088894ccc07c00840044c8ccc010010c08c00ccccc8888c8cc00400401c894ccc0980044cc09ccdd81ba9006374c00a97adef6c6013232323253330273375e6600e014004980103d879800013302b337606ea4028dd30048028a99981399b8f00a0021323253330293370e900000089981699bb03752018605c604e00400a200a604e00266601001401200226605666ec0dd48011ba600133006006003375660500066eb8c098008c0a8008c0a0004dd7180f0009bab301f001222325333021533302400114a22940530103d87a800013374a9000198129ba60014bd701919980080080180111129998130010800899199802002181500199999111191980080080391299981680089981719bb0375200c6ea00152f5bded8c0264646464a66605c66ebccc01c028009300103d8798000133032337606ea4028dd40048028a99981719b8f00a0021323253330303370e900000089981a19bb03752018606a605c00400a200a605c00266601001401200226606466ec0dd48011ba800133006006003375a605e0066eb8c0b4008c0c4008c0bc004dd718128009bad30260012223253330283370e00290000a6103d87a800013374a9000198161ba80014bd7019b80002001015302800200e302100223330090014bd70111199806801000911198109ba733021375200c660426ea400ccc084dd400125eb8000488c8cc00400400c894ccc07000452889919299980d99198008008031129998100008a5013232533301f3375e6e9c008dd38030a511330040040013024002375860440022660080080022940c080008dd6180f00091191980080080191299980d8008a5eb7bdb1804c8c8c8c94ccc070cdc3a400400226600c00c006264660426466ec0c08c004c08cc090004dd6181100099803803802180d001180d0009802801180f801180e8009111919299980c19b87480000044c9300103d87a800030160021323232533301e00114c103d87a8000132533301f00113232533301e3370e9002000899191919ba548000cc094c8dd3998131811800998131812000a5eb80cdd81ba9008375000297ae0375a00260480026038004298103d87a8000301c001300a301a00914c103d87a80003021001330093756601e603000e444a66603aa66603aa66603a66e3c00c0244cdc78010040a5013370e00290010a5013374a9000198109ba7330213752006660426ea4008cc08530010101004bd7025eb805300103d87a8000375c603c002602c004602c002601460286014602800646030603260320024466600a00497ae02223330090020012223232533301b3370e9001000880189980f9810180c801001980c80099980380300180111191980080080191299980b8008a5eb804c8c94ccc058c0140084cc068008cc0100100044cc010010004c06c008c064004894ccc044cdc80010008a60103d8798000153330113371e0040022980103d87a800014c103d87b800022232330010010042253330160011004132333004375c602a0026eacc058004cc00c00cc068008c060004888c8cc004004010894ccc05400440104c8ccc010dd7180a0009bad3015001330030033019002301700123012001230113012001005007004003002149858c94ccc02ccdc3a40000022a66601c60120062930b0a99980599b874800800454ccc038c02400c52616163009002375c0026eb80048c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d11",
    // mintChest:
    //   "590936010000323232323232323232323222322232533300933333232323222223253330123370e900018088008991929980b1919911b993322323330010010050022225333021002100113232333005005001533301e3370e6e3400d200013730004266e2800ccdc50039b98002302500337326eb8c08c008dcc000a441003301b37526e60c0252210852656465656d6572003301b37526e61241023a20003301b37526e60c0252210122003301b37526e60c8dcc999119199800800801801111299980d99b880024800040044c8c8c8ccc018018cdc0802a400466e2ccdc0001299980f19b8800248050520601482b804cdc599b80001533301e33710002900a0a40c0290570080219b8600248080cdc1800a404066e38018008cdc09b8d001480092201003766002660366ea4dcc1804a450122004bd7024900330150054c0103d8798000132533301a001153330154a0294454cc05d2411d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a0264a6660360022a66602c9405288a9980c24811d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a0264a66603800226464a66603264a666034002294454cc0712401186f6e655f73686f745f6d696e74696e67203f2046616c73650014a064646600200200444a66604200229404c8c94ccc078cdd7980a180e0010080a51133004004001302500230230013758601e602e601e602e0122a666032664464a666038002294454cc079241196d696e7465645f63686573745f6c6f636b203f2046616c73650014a064646600200200844a66604600229404c8c94ccc080cdd79ba6330260024bd6f7b6301ba6330260054bd6f7b6300a5113300400400130270023025001337606ea40053010101003301f0023301f0014bd6f7b6300060a99980c999119299980e0008a51153301e4901186d696e7465645f63686573745f6b6579203f2046616c73650014a0646600200200644a66604400229404c8c94ccc07ccdc79bae302200200514a2266008008002604c00460480026603e0046603e00297adef6c604890843686573744b657900132533301a00114a22a6603892011773656e745f63686573745f6c6f636b203f2046616c73650014a0646464a6660426048004264a66603a66e20c8c8c94ccc080cdc3a4004603e00226464a66604466e1d200230253754603260400082002266e000052002375a6050002603c0022a6604492012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163015301d0013322323253330223370e900000088020a99981119b87480080044010400cc080004c8c94ccc088cdc3a40000022980103d8798000153330223370e90020008a6103d87b80001533302253330223370e900118129baa3019302000413370e900118129baa3019302000313330223370e900118129baa301930200034a09445300103d87a8000153330223370e900118129baa3019302000414c103d87b800014c103d8798000302000133223253330233370e9000000899299981219b87480000045300103d87a800014c103d87980003022002153330233370e9002000899299981219b8748010004530103d87a800014c103d87b80003022002132323253330263370e90000008a60103d87b8000153330263370e90020008a6103d8798000132325333028337100080022980103d8798000153330283370e0080022980103d87a800014c103d87b8000375a605c002604800a60480086eb4c0ac004c08400cc084008c058c078008c058c078004c050c070004c054c070004c090c094c094c094c094c094c094c094c06c0100045288a9980fa48144756e736166655f756e777261702e66696e6974655f73746172745f6f662874786e2e76616c69646974795f72616e676529203c20646561646c696e65203f2046616c73650014a06eb4c08000454cc0792401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016302200132323300100100222533302200114bd6f7b630099191919299981099b87480080044cc01801800c4c8cc0a0c8cdd81815000981518158009bac302900133007007004301f002301f001323253330213370e9000000899260103d87a8000301f0021323232533302900114c103d87a8000132533302a0011323253330273370e9002000899191919ba548000cc0c0c8dd3998189817000998189817800a5eb80cdd81ba9008375000297ae0375a002605e002604a004298103d87a80003025001301a302300814c103d87a8000302c0013322323300100100322533302c00114bd70099199911191980080080191299981900088018991999111919299981999b8748008004400c4cc0e4c0e8c0c400800cc0c4004ccc03402400c008dd718188009bad30320013300300330360023034001375c60560026eacc0b0004cc00c00cc0c0008c0b8004dd5980d181080311129998132999813299981319b8f00301313371e00403229404cdc3800a400429404cdd2a4000660586e9ccc0b0dd4801998161ba90023302c4c10101004bd7025eb805300103d87a8000375c6052002603e004603e002602a603a602a603a004604c00460480026eb0c03cc060004c03cc05c0245280a5014a0603e006603c0062a66602e9405288a9980ca4811d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a0603c002603a0026644664464a66603266e1d20020011002137566040602e006602e004646600200200644a66603a0022980103d87a8000132323232533301c3371e00e004266e95200033022374c00297ae01330060060033756603e0066eb8c074008c084008c07c0052f5bded8c064646600200200444a666038002297adef6c60132323232533301b3371e911000021003133021337606ea4008dd3000998030030019bab301e003375c60380046040004603c0026eacc06cc070c070c070c070c048c028c048010004dd7180d00098080008a9980a24812a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163008300f0012373200246026602860280024602400246022602400200800c0020042930b299980419b8748000c02cdd50010a4c2c6eb80048c01cdd5000918029baa0015734ae6d5ce2ab9d5573caae7d5d02ba15745",
    // validate:
    //   "",
  };

  const alwaysTrue: MintingPolicy = {
    type: "PlutusV2",
    script:
      "58635861010000323232323232322253330053370e900018031baa001153330054a22930b09912999803a51149858c020c01cdd500099800800a40004444666600a66e1c00400c0208cccc014014cdc0002240046014002004004ae6955ceaab9e5742ae89",
  };
  const alwaysTruePolicy = lucid.utils.validatorToScriptHash(alwaysTrue);
  const alwaysTrueToken1nameStr = "Gold Medallion";
  const alwaysTrueToken1nameHex = fromText(alwaysTrueToken1nameStr);
  const alwaysTrueToken1 = `${alwaysTruePolicy}${alwaysTrueToken1nameHex}`;
  const alwaysTrueToken1metadata = {
    name: alwaysTrueToken1nameStr,
    image: "ipfs://QmbkhhMrYKVUnEufyTGkUwcTWA61Zj9u7Mf2f9iPSw7QBT",
  };
  const alwaysTrueToken2nameStr = "Black Pearl";
  const alwaysTrueToken2nameHex = fromText(alwaysTrueToken2nameStr);
  const alwaysTrueToken2 = `${alwaysTruePolicy}${alwaysTrueToken2nameHex}`;
  const alwaysTrueToken2metadata = {
    name: alwaysTrueToken2nameStr,
    image: "ipfs://QmUZcPgZXPn1emtijgFJMwkFswXE7mwtEXR6mraCYnrASn",
  };

  const voidData = Data.to(new Constr(0, []));

  const action = {
    delayUnlock: Data.to(new Constr(0, [])),
    unlockChest: Data.to(new Constr(1, [])),
  };

  const chestKey = {
    name: "ChestKey",
    image: "ipfs://QmdvFVHauVFw4XTxQMHfsQy4g4zNsxHaNDv1mMw1Fbt3PY",
  };

  const chestLock = {
    name: "Dead Man's Chest",
    image: "ipfs://QmavSMgKNtRFu4wXCucUbC4dNDqwN4TDfBoW6sk7kxj9tE",
  };

  const mintTreasures = async () => {
    try {
      console.log("MintTreasures():");
      if (lucid) {
        const tx = await lucid
          .newTx()
          .attachMintingPolicy(alwaysTrue)
          .mintAssets(
            {
              [alwaysTrueToken1]: BigInt(5),
              [alwaysTrueToken2]: BigInt(5),
            },
            voidData
          )
          .attachMetadata(721, {
            [alwaysTruePolicy]: {
              [alwaysTrueToken1nameHex]: {
                name: alwaysTrueToken1metadata.name,
                image: alwaysTrueToken1metadata.image,
              },
              [alwaysTrueToken2nameHex]: {
                name: alwaysTrueToken2metadata.name,
                image: alwaysTrueToken2metadata.image,
              },
            },
          })
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      console.log(x);
    }
  };

  const createChest = async () => {
    try {
      console.log("CreateChest():");
      if (lucid) {
        const userAddress = await lucid.wallet.address();
        console.log({ userAddress: userAddress });

        const utxos = await lucid.wallet.getUtxos();
        console.log({ utxos: utxos });
        if (!utxos.length) {
          throw { emptyWalletAddress: "No UTxO to consume." };
        }

        const chestHexName = fromText(chestLock.name);
        const chestKeyHexName = fromText(chestKey.name);
        console.log({ lock: chestHexName, key: chestKeyHexName });

        // validator params of `morbid.validator.mint_chest` script
        const mintChestParams = {
          utxoRef: new Constr(0, [
            new Constr(0, [String(utxos[0].txHash)]), // TxHash
            BigInt(utxos[0].outputIndex), // TxIndex
          ]), // OutputReference
          chestName: chestHexName, // AssetName
        };
        const mintChest = applyParamsToScript(compiledCode.mintChest, [
          mintChestParams.utxoRef,
          mintChestParams.chestName,
        ]);
        const mintChestScript: MintingPolicy = {
          type: "PlutusV2",
          script: applyDoubleCborEncoding(mintChest), // cborHex
        };
        const mintChestScriptHash = lucid.utils.validatorToScriptHash({
          type: "PlutusV2",
          script: mintChest,
        }); // used as `policy_id`

        const mintedLockName = `${mintChestScriptHash}${chestHexName}`;
        const mintedKeyName = `${mintChestScriptHash}${chestKeyHexName}`;

        // validator params of `morbid.validator.validate` script
        const chestParams = {
          policyId: mintChestScriptHash, // PolicyId
          chestName: chestHexName, // AssetName
        };
        const chest = applyParamsToScript(compiledCode.validate, [
          chestParams.policyId,
          chestParams.chestName,
        ]);
        const validateScript: SpendingValidator = {
          type: "PlutusV2",
          script: applyDoubleCborEncoding(chest), // cborHex
        };
        const chestAddress = lucid.utils.validatorToAddress({
          type: "PlutusV2",
          script: chest,
        });
        console.log({ chestAddress: chestAddress });

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const tx = await lucid
          .newTx()
          .collectFrom(utxos)
          .attachMintingPolicy(mintChestScript)
          .mintAssets(
            { [mintedLockName]: BigInt(1), [mintedKeyName]: BigInt(2) },
            voidData
          )
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: validateScript },
            {
              lovelace: BigInt(42_000000),
              [mintedLockName]: BigInt(1),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .attachMetadata(721, {
            [mintChestScriptHash]: {
              [chestHexName]: {
                name: chestLock.name,
                image: chestLock.image,
              },
              [chestKeyHexName]: {
                name: `${chestLock.name} - ${chestKey.name}`,
                image: chestKey.image,
                chest_address: chestAddress,
                // ref_hash: utxos[0].txHash, // not needed
                // ref_index: utxos[0].outputIndex,
              },
            },
          })
          .validFrom(time)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        window.location.reload();
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const addTreasure = async () => {
    try {
      console.log(`AddTreasure(${chestAddress}):`);
      if (lucid) {
        // await lookForChestAddress(); // setChestAddress already set

        if (!chestAddress?.length) {
          throw { noChestKey: "No ChestKey was found." };
        }

        const tx = await lucid
          .newTx()
          .payToContract(
            chestAddress,
            { inline: voidData }, // still need to put arbitrary INLINE Datum to be redeemable
            {
              lovelace: BigInt(42_000000),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const delayUnlock = async () => {
    try {
      console.log(`DelayUnlock(${chestAddress}):`);
      if (lucid && keyTokenUTxO) {
        const userAddress = await lucid.wallet.address();
        console.log({ userAddress: userAddress });

        const lock = (await lucid.utxosAt(chestAddress)).find(
          (utxo) => utxo.datum && utxo.scriptRef
        );
        console.log({ lock: lock });
        if (!lock) {
          throw { noChestLock: "No ChestLock was found." };
        }

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const lockName = `${keyTokenUTxO.policyID}${fromText(chestLock.name)}`;
        console.log({
          [`${chestLock.name} - ChestLock`]: {
            lovelace: lock.assets["lovelace"],
            [lockName]: lock.assets[lockName],
          },
        });

        const tx = await lucid
          .newTx()
          .readFrom([lock, keyTokenUTxO.utxo])
          .collectFrom([lock], action.delayUnlock)

          // normal case:
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: lock.scriptRef! },
            lock.assets
          )

          // invalid datum:
          // .payToContract(
          //   chestAddress,
          //   { inline: voidData, scriptRef: lock.scriptRef! },
          //   lock.assets
          // )

          // drain by resend chest to another address:
          // .payToAddressWithData(
          //   userAddress, // drain to any address
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   lock.assets
          // )

          // drain `ChestLock` UTxO:
          // .payToContract(
          //   chestAddress, // just resend the lock only
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   { [lockName]: BigInt(lock.assets[lockName]) }
          // )
          // .payToAddress(
          //   userAddress, // drain ADA to any address
          //   { lovelace: BigInt(lock.assets["lovelace"]) }
          // )

          // take-out treasures:
          //   .payToContract(
          //     chestAddress, // just resend the lock and ADA
          //     { inline: datum, scriptRef: lock.scriptRef! },
          //     {
          //       lovelace: BigInt(lock.assets["lovelace"]),
          //       [lockName]: BigInt(lock.assets[lockName]),
          //     }
          //   )
          //   .payToAddress(
          //     userAddress, // steal treasures
          //     {
          //       [alwaysTrueToken1]: BigInt(lock.assets[alwaysTrueToken1]),
          //       [alwaysTrueToken2]: BigInt(lock.assets[alwaysTrueToken2]),
          //     }
          //   )

          // take-out chest lock:
          // .payToContract(
          //   chestAddress,
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   { lovelace: BigInt(lock.assets["lovelace"]) }
          // )
          // .payToAddress(
          //   userAddress, // take-out the lock to any address
          //   { [lockName]: BigInt(lock.assets[lockName]) }
          // )

          .addSigner(userAddress)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const unlockChest = async () => {
    try {
      console.log(`UnlockChest(${chestAddress}):`);
      if (lucid) {
        const utxos = (await lucid.utxosAt(chestAddress)).filter(
          (utxo) => utxo.datum // UTxO must have datum to be redeemable
        );
        console.log({ utxos: utxos });
        if (!utxos?.length) {
          throw { emptyScriptAddress: "No UTxO to redeem." };
        }

        const scriptRef = utxos.find((utxo) => utxo.scriptRef);
        console.log({ scriptRef: scriptRef });
        if (!scriptRef) {
          throw { noScriptRef: "No ScriptRef was found." };
        }

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const tx = await lucid
          .newTx()
          .readFrom([scriptRef])
          .collectFrom(utxos, action.unlockChest)
          .validFrom(time)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        window.location.reload();
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const resendChest = async () => {
    try {
      console.log(`ResendChest(${chestAddress}):`);
      if (resendableChest) {
        const initialMintTxUTxOs = await getTxUTxOs(
          resendableChest.initial_mint_tx_hash
        );
        console.log({ initialMintTxUTxOs: initialMintTxUTxOs });

        const oRefScriptHash = initialMintTxUTxOs["outputs"].find(
          (x: any) => x.reference_script_hash
        );
        console.log({ oRefScriptHash: oRefScriptHash });

        const validateScript: SpendingValidator = {
          type: "PlutusV2",
          script: await getScriptCBOR(oRefScriptHash.reference_script_hash), // cborHex
        };
        console.log({ validateScript: validateScript });

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const tx = await lucid
          .newTx()
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: validateScript },
            {
              lovelace: BigInt(42_000000),
              [`${resendableChest.policyID}${resendableChest.assetName}`]:
                BigInt(1),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  return !loaded ? (
    <></>
  ) : (
    <div>
      <div>
        <br />
        <hr />
        <br />
        <div>Mint arbitrary tokens for testing:</div>
        {/* MintTreasures */}
        <button className="btn btn-primary m-5" onClick={mintTreasures}>
          Mint Treasures
        </button>
        <br />
        <br />
        <hr />
        <br />
      </div>

      <div>
        {/* CreateChest */}
        <button className="btn btn-primary m-5" onClick={createChest}>
          Create Chest
        </button>

        {chestAddress?.length ? (
          <>
            {/* AddTreasure */}
            <button className="btn btn-secondary m-5" onClick={addTreasure}>
              Add Treasure
            </button>

            {keyTokenUTxO ? (
              <>
                {/* DelayUnlock */}
                <button className="btn btn-secondary m-5" onClick={delayUnlock}>
                  Delay Unlock
                </button>
              </>
            ) : (
              <></>
            )}

            {/* UnlockChest */}
            <button className="btn btn-secondary m-5" onClick={unlockChest}>
              Unlock Chest
            </button>

            {resendableChest ? (
              <>
                {/* ResendChest */}
                <button className="btn btn-secondary m-5" onClick={resendChest}>
                  Resend Chest
                </button>
              </>
            ) : (
              <></>
            )}

            {/* ChestInfo */}
            <div>{`Current ChestAddress: ${chestAddress}`}</div>
          </>
        ) : (
          <div>I don't remember having any chest currently...</div>
        )}
      </div>
    </div>
  );
};

export default MorbidV2;
