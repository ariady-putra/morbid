import {
  Constr,
  Data,
  Lucid,
  MintingPolicy,
  SpendingValidator,
  UTxO,
  applyDoubleCborEncoding,
  applyParamsToScript,
  fromText,
} from "lucid-cardano";
import { useEffect, useState } from "react";
import {
  getAssetMetadata,
  getLatestBlockInfo,
  getScriptCBOR,
  getTxMetadata,
  getTxUTxOs,
} from "../utils/blockfrost";

declare type TokenUTxO = {
  utxo: UTxO;
  initial_mint_tx_hash: string;
  policyID: string;
  assetName: string;
  metadata: any;
};

const MorbidV2 = (props: {
  lucid: Lucid;
  setActionResult: (actionResult: string) => void;
}) => {
  const lucid = props.lucid;
  const setActionResult = props.setActionResult;

  const [loaded, setLoaded] = useState(false);
  const [chestAddress, setChestAddress] = useState("");
  const [resendableChest, setResendableChest] = useState<TokenUTxO>(); // for resending chest lock
  const [keyTokenUTxO, setKeyTokenUTxO] = useState<TokenUTxO>(); // for delaying chest deadline

  useEffect(() => {
    lookForChestAddress();
    lookForResendableChest();
    setLoaded(true);
  }, []);

  const lookForChestAddress = async () => {
    const key = await lookForToken(chestKey.name);
    setKeyTokenUTxO(key);
    setChestAddress(key?.metadata["chest_address"]);
  };

  const lookForResendableChest = async () => {
    setResendableChest(await lookForToken(chestLock.name));
  };

  const lookForToken = async (name: string) => {
    let result: TokenUTxO | undefined;
    if (lucid) {
      const utxos = await lucid.wallet.getUtxos();
      console.log({ utxos: utxos });
      if (!utxos.length) {
        throw { emptyWalletAddress: "No UTxO to look for." };
      }

      const forEachAsync = async (
        utxos: UTxO[],
        callback: { (utxo: UTxO): Promise<void>; (arg0: any): any }
      ) => {
        for (const utxo of utxos) {
          await callback(utxo);
        }
      };

      let foundToken = false;
      const myAsyncCallback = async (utxo: UTxO) => {
        if (foundToken) return;
        let hasToken = false;
        for (const asset in utxo.assets) {
          try {
            if (asset === "lovelace") continue;
            // console.log({ asset: asset, qty: utxo.assets[asset] });
            const assetMetadata = await getAssetMetadata(asset);
            console.log({ assetMetadata: assetMetadata });

            const initial_mint_tx_hash = assetMetadata["initial_mint_tx_hash"];
            const policyID = assetMetadata["policy_id"];
            const assetName = fromText(name);

            if (asset.substring(policyID.length) !== assetName) continue;

            const onchainMetadata =
              assetMetadata["onchain_metadata"] ||
              (await getTxMetadata(initial_mint_tx_hash))["json_metadata"][
                policyID
              ][assetName];
            console.log({ onchainMetadata: onchainMetadata });
            result = {
              utxo: utxo,
              initial_mint_tx_hash: initial_mint_tx_hash,
              policyID: policyID,
              assetName: assetName,
              metadata: onchainMetadata,
            };
            hasToken = true;
            break;
          } catch (x) {
            setActionResult(JSON.stringify(x));
          }
        }
        if (hasToken) {
          foundToken = true;
        }
      };
      await forEachAsync(utxos, myAsyncCallback);
    }
    return result;
  };

  const compiledCode = {
    // // no traces:
    mintChest:
      "590635010000323232323232323232323222322232533300b32533300c3370e90001805800899191929998090008a50132533301300114a0264a66602800226464a66602664646600200200444a66603200229404c8c94ccc060cdd79980a180b0012400002629444cc010010004c074008c06c004dd61980798089980798088052400090000a999809999119191980080080211299980d8008a5013232533301a3375e6e98cc0780092f5bded8c06e98cc0780152f5bded8c029444cc010010004c07c008c074004cdd81ba90014c0101010033017002330170014bd6f7b6300060a9998099991191980080080191299980d0008a501323253330193371e6eb8c068008014528899802002000980f001180e0009980b8011980b800a5eb7bdb1812210843686573744b65790013232325333019301c00213233710646464a66603466e1d2002301900113232533301c3370e9001180e9baa33018301a0044800840044cdc0000a40046eb4c080004c06000458cc054c05c005200033223232533301c3370e900000088020a99980e19b87480080044010400cc068004c8c94ccc070cdc3a40000022980103d87980001533301c3370e90020008a6103d87b80001533301c533301c3370e9001180e9baa33018301a004480084cdc3a4004603a6ea8cc060c06800d2002133301c3370e9001180e9baa33018301a003480092825114c0103d87a80001533301c3370e9001180e9baa33018301a00448008530103d87b800014c103d8798000301a001332232533301d3370e9000000899299980f19b87480000045300103d87a800014c103d8798000301c0021533301d3370e9002000899299980f19b8748010004530103d87a800014c103d87b8000301c002132323253330203370e90000008a60103d87b8000153330203370e90020008a6103d8798000132325333022337100080022980103d8798000153330223370e0080022980103d87a800014c103d87b8000375a604c002603c00a603c0086eb4c08c004c06c00cc06c008cc058c060009200033016301800148000cc050c058005200033014301600148008cc04cc054011200e001375a60300022c603400264646600200200444a666034002297adef6c60132323232533301b3370e9001000899803003001899191981080099804004002991919bb030230023023001302300137586042002603200460320026464a66603666e1d20000011324c0103d87a800030190021323232533302100114c103d87a800013253330220011323253330213370e9002000899191919ba548000cc0a0c8dd3998149813000998149813800a5eb80cdd81ba9008375000297ae0375a002604e002603e004298103d87a8000301f0013301b301d00848010530103d87a8000302400132323300100100222533302300114bd700991919191919198008008019129998150008801899191919191919299981719b8748008004400c4c8c8cc0d0dd38008029bac3034001302c002302c001533302c533302c533302c3371e01403e266e3c00c094528099b8700248008528099ba548000cc0c0dd3998181ba900a330303752006660609810101004bd7025eb805300103d87a800033006006003375a60580066eb8c0a8008c0b8008c0b0004cc01801800cdd598128019bae302300230270023025001375666032603600c90011bae302100130190023019001330153017330153017002480012000301e002301c001375866020602400290021980798088052400029405280a503017003301600314a0602c002602a00264646464a66602466e1d200200114bd6f7b6300991bab301800130100023010001323300100100222533301500114c0103d87a800013232323253330163371e012004266e9520003301a374c00297ae01330060060033756602e0066eb8c054008c064008c05c004c8cc004004008894ccc05000452f5bded8c0264646464a66602a66e3d221000021003133019337606ea4008dd3000998030030019bab3016003375c60280046030004602c0026eaccc028c030cc028c030015200048020dd7180900098050008b198039804801240042930b299980519b8748000c02cdd50010a4c2c6eb8004cc0040052000222233330073370e0020060184666600a00a66e000112002300e001002002230053754002460066ea80055cd2ab9d5573caae7d5d02ba157441",
    validate:
      "590cd4010000323232323232323232323223223222232533300d3333332323232323232323232323232323232222223253330233370e9001181100089919299981299b874800000454ccc094c8c8c8c8c8c8c8c94ccc0c0c0cc0084c8c8c8c8c8c94ccc0d8c0e40084c94ccc0d0cc08001c00454ccc0d0cc08000401c4cdd78040010a5014a064603e00266603800897adef6c6001d1630370013230190013302100100b375860640046eb0c0c0004c8c8c054004cc04c004020dd6198151816004a400864603200266602c00897adef6c600171630310013230130013301b001005375860580046eb0c0a8004c8c8c03c004cc0340048c8c010004cc098c0a00052002375866048604c0069000119bb0374ca66605064600600266048604c002900009bab3302430260014800852f5bded8c066048604c002900011919299981499b87480080044c92898138010992503027002302700133023302500148000cc084c08c01120001323232533302b302e002132323232533302f303200213232533302e533302e3371e00c004266e2001400452809929998190008a501323300100100222533303400114a226464a6660660042660080080022940c0e0008cdc3a400460646ea8c0d8004c8c8cc004004008894ccc0d000452f5c0264646464a66606a66e1d2002001133006006003132323303b3330370014c0103d87a80004c0103d8798000330080080053370e9001181b9baa303b001303300230330013232533303800114c0103d87a800013374a90001981c99981a9919191980080080191299981e0008a5013232533303b3371e00400a29444cc010010004c100008dd7181f0009919299981c19b87480000044c8dd7181f000981b0010991bae303e0013036002303600133032303433032303400348001200037586606260660209008260103d87a80004c0103d87980004bd701919812000911299981c299981c19b8f00301a13371e00491010843686573744b65790014a0266e9520003303c374e660786ea400ccc0f0dd48011981e1ba80014bd7025eb805300103d87a800037566606060640029001198179818801240046070004606c0026eb0cc0a8c0b0025200214a06eb4c0bc008dd718168008b1818000991980c000919980d0008070079bac33026302800548010dd698158011bae302900116302c001323301400123233301700100b00c33024302600148008dd6198111812000a400066042604600890000a501323253330273370e900018130008991919299981519b8748010c0a40044c8c8c8cdc4000991919299981819b8748008c0bc0044c8c94ccc0c8cdc3a400460666ea8cc0b8c0c00112002100113370000290011bad3036001302e001163302b302d00148000cc88c8c94ccc0c8cdc3a400000220082a66606466e1d2002001100410033030001323253330323370e90000008a6103d8798000153330323370e90020008a6103d87b80001533303253330323370e900118199baa3302e3030004480084cdc3a400460666ea8cc0b8c0c000d200213330323370e900118199baa3302e3030003480092825114c0103d87a8000153330323370e900118199baa3302e303000448008530103d87b800014c103d8798000303000133223253330333370e9000000899299981a19b87480000045300103d87a800014c103d87980003032002153330333370e9002000899299981a19b8748010004530103d87a800014c103d87b80003032002132323253330363370e90000008a60103d87b8000153330363370e90020008a6103d8798000132325333038337100080022980103d8798000153330383370e0080022980103d87a800014c103d87b8000375a6078002606800a60680086eb4c0e4004c0c400cc0c4008cc0b0c0b800920003302c302e00148000cc0a8c0b000520003302a302c00148008cc0a4c0ac021200e375a002606000260500022c6604a604e6604a604e002900124008605a002604a0022c64646600200200444a666058002298103d87a800013232533302b3370e666444646464a66606266e1d20020011480004c8dd6981b8009817801181780099299981819b87480080045300103d87a800013232323300100100222533303700114c103d87a800013232323253330383371e016004266e9520003303c375000297ae0133006006003375a60720066eb8c0dc008c0ec008c0e4004dd5981b0009817001181700099198008008021129998198008a60103d87a800013232323253330343371e010004266e95200033038374c00297ae01330060060033756606a0066eb8c0cc008c0dc008c0d4004dd599813981499813981480124004900100680724004266e9520003302f0024bd70099802002000981800118170009bac33022302400148000cc084c08c011200030230043021001163301e30200014800888c8cc00400400c894ccc08c00452f5bded8c0264646604c600a00466008008002604e004604a002600200244a66603e002297bdb180101800001018000132323232323232337606e9ccc09cdd30028011ba733027004001375860480046eb0c088004cc01801800cc08400cdd5980f80118118011810800980080091299980e8008a5eb804c8c8cc080008cc010010cc0300048ccc074cdd7800801a504a26042004603e00244464666002002008006444a66604000420022646466600a00a0026600c00600460480066eacc08800888c8ccc00400400c0088894ccc07800840044c8c8c8c8ccc01c01c00cc8cc004004018894ccc0900044cc094cdd81ba9004374c00697adef6c6013232323253330253375e6602c010004980103d8798000133029337606ea4020dd30038028a99981299b8f0080021323253330273370e9000000899191981699bb037520186e9800401cdd5981680098128010802981280099299981329998148008a5114a02980103d87a800013374a9000198151ba60014bd701919980080080400111129998158010800899191919199803803801991980080080311299981880089981919bb037520086ea000d2f5bded8c0264646464a66606466ebccc08c020009300103d8798000133036337606ea4020dd40038028a99981919b8f0080021323253330343370e9000000899191981d19bb037520186ea000401cdd6981d00098190010802981900099299981999b8700148000530103d87a800013374a90001981b9ba80014bd7019b80007001133036337606ea4008dd4000998030030019bad3033003375c6062004606a00460660026eb4c0b400cdd718158011817801981680109981499bb037520046e98004cc01801800cdd598130019bae302400230280023026001375660400066eb8c078008c08800cc0800088ccc0200052f5c0444666018004002444660406e9ccc080dd4803198101ba900333020375000497ae000122323300100100322533301b00114a226464a666034646600200200c44a66603e00229404c8c94ccc078cdd79ba7002374e00c29444cc010010004c08c008dd618108008998020020008a50301f0023758603a00244646600200200644a666034002297adef6c60132323232533301b3370e9001000899803003001899191981080099804004002991919bb03023002302300130230013758604200260320046032002600a004603c00460380024446464a66602e66e1d20000011324c0103d87a800030150021323232533301d00114c103d87a8000132533301e00113232533301d3370e9002000899191919ba548000cc090c8dd3998129811000998129811800a5eb80cdd81ba9008375000297ae0375a00260460026036004298103d87a8000301b00133017301900948010530103d87a800030200013233009001222533301d533301d533301d3371e006014266e3c008024528099b8700148008528099ba548000cc084dd3998109ba90033302137520046604298010101004bd7025eb805300103d87a800037566602a602e00e90011bae301d00130150023015001330113013330113013003480012000223330050024bd701111998048010009111919299980d99b8748008004400c4c8c8cc084dd38008029bac30210013019002301900133300700600300222323300100100322533301700114bd7009919299980b180280109980d00119802002000899802002000980d801180c80091299980899b9000200114c103d8798000153330113371e0040022980103d87a800014c103d87b80002223233001001004225333016001100413232323233300700200133006006003375660300066eb8c058008c068008c060004888c8cc004004010894ccc05400440104c8c8c8c8ccc01c008004cc01801800cdd6980b8019bae301500230190023017001005007004003002149858c94ccc034cdc3a40000022a66602060160062930b0a99980699b874800800454ccc040c02c00c5261616300b002375c0026eb8004cc0040052000222233330073370e0020060184666600a00a66e000112002300e001002002230053754002460066ea80055cd2ab9d5573caae7d5d02ba157441",
    // mintChest:
    //   "59097b0100003232323232323232323232323222322232533300b33333222223253330113370e900018080008991929980a991991191b990013322323330010010050022225333020002100113232333005005001533301d3370e6e3400d200013730004266e2800ccdc50039b98002302400337326eb8c088008dcc000a45003301a37526e60c0252210852656465656d6572003301a37526e61241023a20003301a37526e60c0252210122003301a37526e60c8c8dcc800999119199800800801801111299980d19b880024800040044c8c8c8ccc018018cdc0802a400466e2ccdc0001299980e99b8800248050520601482b804cdc599b80001533301d33710002900a0a40c0290570080219b8600248080cdc1800a404066e38018008cdc09b8d00148009221003766002660346ea4dcc1804a450122004bd7024900330140054c0103d87980001325333019001153330144a0294454cc0592411d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a0264a6660340022a66602a9405288a9980ba4811d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a0264a66603600226464a66603064a666032002294454cc06d2401186f6e655f73686f745f6d696e74696e67203f2046616c73650014a064646600200200444a66604000229404c8c94ccc074cdd79980c980d8012400002029444cc010010004c090008c088004dd61980a180b1980a180b004a400090000a99980c199119299980d8008a51153301d491196d696e7465645f63686573745f6c6f636b203f2046616c73650014a064646600200200844a66604400229404c8c94ccc07ccdd79ba6330250024bd6f7b6301ba6330250054bd6f7b6300a5113300400400130260023024001337606ea40053010101003301e0023301e0014bd6f7b6300060a99980c199119299980d8008a51153301d4901186d696e7465645f63686573745f6b6579203f2046616c73650014a0646600200200644a66604200229404c8c94ccc078cdc79bae302100200514a2266008008002604a00460460026603c0046603c00297adef6c604890843686573744b657900132533301900114a22a6603692011773656e745f63686573745f6c6f636b203f2046616c73650014a0646464a6660406046004264a66603866e20c8c8c94ccc07ccdc3a4004603c00226464a66604266e1d2002302437546603a603e00890010800899b8000148008dd69813800980e8008a99810a492a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163301a301c00148000cc88c8c94ccc084cdc3a400000220082a66604266e1d200200110041003301f001323253330213370e90000008a6103d8798000153330213370e90020008a6103d87b80001533302153330213370e900118121baa3301d301f004480084cdc3a400460486ea8cc074c07c00d200213330213370e900118121baa3301d301f003480092825114c0103d87a8000153330213370e900118121baa3301d301f00448008530103d87b800014c103d8798000301f00133223253330223370e9000000899299981199b87480000045300103d87a800014c103d87980003021002153330223370e9002000899299981199b8748010004530103d87a800014c103d87b80003021002132323253330253370e90000008a60103d87b8000153330253370e90020008a6103d8798000132325333027337100080022980103d8798000153330273370e0080022980103d87a800014c103d87b8000375a605a002604600a60460086eb4c0a8004c08000cc080008cc06cc07400920003301b301d00148000cc064c06c005200033019301b00148008cc060c068011200e00114a22a6603c920144756e736166655f756e777261702e66696e6974655f73746172745f6f662874786e2e76616c69646974795f72616e676529203c20646561646c696e65203f2046616c73650014a06eb4c07c00454cc0752401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016302100132323300100100222533302100114bd6f7b630099191919299981019b87480080044cc01801800c4c8c8cc0a0004cc020020014c8c8cdd81815001181500098150009bac3028001301e002301e001323253330203370e9000000899260103d87a8000301e0021323232533302800114c103d87a800013253330290011323253330263370e9002000899191919ba548000cc0bcc8dd3998181816800998181817000a5eb80cdd81ba9008375000297ae0375a002605c0026048004298103d87a8000302400133020302200848010530103d87a8000302b00132323300100100222533302a00114bd700991919191919198008008019129998188008801899191919191919299981999b8748008004400c4c8c8cc0ecdd38008029bac303b001303100230310015333031533303153330313371e01403e266e3c00c094528099b8700248008528099ba548000cc0dcdd39981b9ba900a3303737520066606e9810101004bd7025eb805300103d87a800033006006003375a60660066eb8c0c4008c0d4008c0cc004cc01801800cdd598160019bae302a002302e002302c00137566603c604000c90011bae3028001301e002301e0013301a301c3301a301c0024800120003025002302300137586602a602e00290021980a180b004a400029405280a50301e003301d003153330164a0294454cc06124011d76616c69645f6e756d6265725f6f665f6173736574203f2046616c73650014a0603a002603800264646464a66602e66e1d200200114bd6f7b6300991bab301f00130150023015001323300100100222533301c00114c0103d87a8000132323232533301b3371e012004266e95200033021374c00297ae01330060060033756603c0066eb8c070008c080008c078004c8cc004004008894ccc06c00452f5bded8c0264646464a66603466e3d221000021003133020337606ea4008dd3000998030030019bab301d003375c6036004603e004603a0026eaccc03cc044cc03cc044011200048020dd7180c80098078008a99809a4812a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163300c300e001480088dcc8008020030008010a4c2ca66601466e1d2000300d37540042930b1bae00133001001480008888cccc01ccdc38008018071199980280299b8000448008c0400040080088c01cdd5000918029baa0015734ae6d5ce2ab9d5573caae7d5d02ba157441",
    // validate:
    //   "",
  };

  const alwaysTrue: MintingPolicy = {
    type: "PlutusV2",
    script:
      "58635861010000323232323232322253330053370e900018031baa001153330054a22930b09912999803a51149858c020c01cdd500099800800a40004444666600a66e1c00400c0208cccc014014cdc0002240046014002004004ae6955ceaab9e5742ae89",
  };
  const alwaysTruePolicy = lucid.utils.validatorToScriptHash(alwaysTrue);
  const alwaysTrueToken1nameStr = "Gold Medallion";
  const alwaysTrueToken1nameHex = fromText(alwaysTrueToken1nameStr);
  const alwaysTrueToken1 = `${alwaysTruePolicy}${alwaysTrueToken1nameHex}`;
  const alwaysTrueToken1metadata = {
    name: alwaysTrueToken1nameStr,
    image: "ipfs://QmbkhhMrYKVUnEufyTGkUwcTWA61Zj9u7Mf2f9iPSw7QBT",
  };
  const alwaysTrueToken2nameStr = "Black Pearl";
  const alwaysTrueToken2nameHex = fromText(alwaysTrueToken2nameStr);
  const alwaysTrueToken2 = `${alwaysTruePolicy}${alwaysTrueToken2nameHex}`;
  const alwaysTrueToken2metadata = {
    name: alwaysTrueToken2nameStr,
    image: "ipfs://QmUZcPgZXPn1emtijgFJMwkFswXE7mwtEXR6mraCYnrASn",
  };

  const voidData = Data.to(new Constr(0, []));

  const action = {
    delayUnlock: Data.to(new Constr(0, [])),
    unlockChest: Data.to(new Constr(1, [])),
  };

  const chestKey = {
    name: "ChestKey",
    image: "ipfs://QmdvFVHauVFw4XTxQMHfsQy4g4zNsxHaNDv1mMw1Fbt3PY",
  };

  const chestLock = {
    name: "Dead Man's Chest",
    image: "ipfs://QmavSMgKNtRFu4wXCucUbC4dNDqwN4TDfBoW6sk7kxj9tE",
  };

  const mintTreasures = async () => {
    try {
      console.log("MintTreasures():");
      if (lucid) {
        const tx = await lucid
          .newTx()
          .attachMintingPolicy(alwaysTrue)
          .mintAssets(
            {
              [alwaysTrueToken1]: BigInt(5),
              [alwaysTrueToken2]: BigInt(5),
            },
            voidData
          )
          .attachMetadata(721, {
            [alwaysTruePolicy]: {
              [alwaysTrueToken1nameHex]: {
                name: alwaysTrueToken1metadata.name,
                image: alwaysTrueToken1metadata.image,
              },
              [alwaysTrueToken2nameHex]: {
                name: alwaysTrueToken2metadata.name,
                image: alwaysTrueToken2metadata.image,
              },
            },
          })
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      console.log(x);
    }
  };

  const createChest = async () => {
    try {
      console.log("CreateChest():");
      if (lucid) {
        const userAddress = await lucid.wallet.address();
        console.log({ userAddress: userAddress });

        const utxos = await lucid.wallet.getUtxos();
        console.log({ utxos: utxos });
        if (!utxos.length) {
          throw { emptyWalletAddress: "No UTxO to consume." };
        }

        const chestHexName = fromText(chestLock.name);
        const chestKeyHexName = fromText(chestKey.name);
        console.log({ lock: chestHexName, key: chestKeyHexName });

        // validator params of `morbid.validator.mint_chest` script
        const mintChestParams = {
          utxoRef: new Constr(0, [
            new Constr(0, [String(utxos[0].txHash)]), // TxHash
            BigInt(utxos[0].outputIndex), // TxIndex
          ]), // OutputReference
          chestName: chestHexName, // AssetName
        };
        const mintChest = applyParamsToScript(compiledCode.mintChest, [
          mintChestParams.utxoRef,
          mintChestParams.chestName,
        ]);
        const mintChestScript: MintingPolicy = {
          type: "PlutusV2",
          script: applyDoubleCborEncoding(mintChest), // cborHex
        };
        const mintChestScriptHash = lucid.utils.validatorToScriptHash({
          type: "PlutusV2",
          script: mintChest,
        }); // used as `policy_id`

        const mintedLockName = `${mintChestScriptHash}${chestHexName}`;
        const mintedKeyName = `${mintChestScriptHash}${chestKeyHexName}`;

        // validator params of `morbid.validator.validate` script
        const chestParams = {
          policyId: mintChestScriptHash, // PolicyId
          chestName: chestHexName, // AssetName
        };
        const chest = applyParamsToScript(compiledCode.validate, [
          chestParams.policyId,
          chestParams.chestName,
        ]);
        const validateScript: SpendingValidator = {
          type: "PlutusV2",
          script: applyDoubleCborEncoding(chest), // cborHex
        };
        const chestAddress = lucid.utils.validatorToAddress({
          type: "PlutusV2",
          script: chest,
        });
        console.log({ chestAddress: chestAddress });

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const tx = await lucid
          .newTx()
          .collectFrom(utxos)
          .attachMintingPolicy(mintChestScript)
          .mintAssets(
            { [mintedLockName]: BigInt(1), [mintedKeyName]: BigInt(2) },
            voidData
          )
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: validateScript },
            {
              lovelace: BigInt(42_000000),
              [mintedLockName]: BigInt(1),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .attachMetadata(721, {
            [mintChestScriptHash]: {
              [chestHexName]: {
                name: chestLock.name,
                image: chestLock.image,
              },
              [chestKeyHexName]: {
                name: `${chestLock.name} - ${chestKey.name}`,
                image: chestKey.image,
                chest_address: chestAddress,
                // ref_hash: utxos[0].txHash, // not needed
                // ref_index: utxos[0].outputIndex,
              },
            },
          })
          .validFrom(time)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        window.location.reload();
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const addTreasure = async () => {
    try {
      console.log(`AddTreasure(${chestAddress}):`);
      if (lucid) {
        // await lookForChestAddress(); // setChestAddress already set

        if (!chestAddress?.length) {
          throw { noChestKey: "No ChestKey was found." };
        }

        const tx = await lucid
          .newTx()
          .payToContract(
            chestAddress,
            { inline: voidData }, // still need to put arbitrary INLINE Datum to be redeemable
            {
              lovelace: BigInt(42_000000),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const delayUnlock = async () => {
    try {
      console.log(`DelayUnlock(${chestAddress}):`);
      if (lucid && keyTokenUTxO) {
        const userAddress = await lucid.wallet.address();
        console.log({ userAddress: userAddress });

        const lock = (await lucid.utxosAt(chestAddress)).find(
          (utxo) => utxo.datum && utxo.scriptRef
        );
        console.log({ lock: lock });
        if (!lock) {
          throw { noChestLock: "No ChestLock was found." };
        }

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const lockName = `${keyTokenUTxO.policyID}${fromText(chestLock.name)}`;
        console.log({
          [`${chestLock.name} - ChestLock`]: {
            lovelace: lock.assets["lovelace"],
            [lockName]: lock.assets[lockName],
          },
        });

        const tx = await lucid
          .newTx()
          .readFrom([lock, keyTokenUTxO.utxo])
          .collectFrom([lock], action.delayUnlock)

          // normal case:
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: lock.scriptRef! },
            lock.assets
          )

          // invalid datum:
          // .payToContract(
          //   chestAddress,
          //   { inline: voidData, scriptRef: lock.scriptRef! },
          //   lock.assets
          // )

          // drain by resend chest to another address:
          // .payToAddressWithData(
          //   userAddress, // drain to any address
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   lock.assets
          // )

          // drain `ChestLock` UTxO:
          // .payToContract(
          //   chestAddress, // just resend the lock only
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   { [lockName]: BigInt(lock.assets[lockName]) }
          // )
          // .payToAddress(
          //   userAddress, // drain ADA to any address
          //   { lovelace: BigInt(lock.assets["lovelace"]) }
          // )

          // take-out treasures:
          //   .payToContract(
          //     chestAddress, // just resend the lock and ADA
          //     { inline: datum, scriptRef: lock.scriptRef! },
          //     {
          //       lovelace: BigInt(lock.assets["lovelace"]),
          //       [lockName]: BigInt(lock.assets[lockName]),
          //     }
          //   )
          //   .payToAddress(
          //     userAddress, // steal treasures
          //     {
          //       [alwaysTrueToken1]: BigInt(lock.assets[alwaysTrueToken1]),
          //       [alwaysTrueToken2]: BigInt(lock.assets[alwaysTrueToken2]),
          //     }
          //   )

          // take-out chest lock:
          // .payToContract(
          //   chestAddress,
          //   { inline: datum, scriptRef: lock.scriptRef! },
          //   { lovelace: BigInt(lock.assets["lovelace"]) }
          // )
          // .payToAddress(
          //   userAddress, // take-out the lock to any address
          //   { [lockName]: BigInt(lock.assets[lockName]) }
          // )

          .addSigner(userAddress)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const unlockChest = async () => {
    try {
      console.log(`UnlockChest(${chestAddress}):`);
      if (lucid) {
        const utxos = (await lucid.utxosAt(chestAddress)).filter(
          (utxo) => utxo.datum // UTxO must have datum to be redeemable
        );
        console.log({ utxos: utxos });
        if (!utxos?.length) {
          throw { emptyScriptAddress: "No UTxO to redeem." };
        }

        const scriptRef = utxos.find((utxo) => utxo.scriptRef);
        console.log({ scriptRef: scriptRef });
        if (!scriptRef) {
          throw { noScriptRef: "No ScriptRef was found." };
        }

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const tx = await lucid
          .newTx()
          .readFrom([scriptRef])
          .collectFrom(utxos, action.unlockChest)
          .validFrom(time)
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        window.location.reload();
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  const resendChest = async () => {
    try {
      console.log(`ResendChest(${chestAddress}):`);
      if (resendableChest) {
        const initialMintTxUTxOs = await getTxUTxOs(
          resendableChest.initial_mint_tx_hash
        );
        console.log({ initialMintTxUTxOs: initialMintTxUTxOs });

        const oRefScriptHash = initialMintTxUTxOs["outputs"].find(
          (x: any) => x.reference_script_hash
        );
        console.log({ oRefScriptHash: oRefScriptHash });

        const validateScript: SpendingValidator = {
          type: "PlutusV2",
          script: await getScriptCBOR(oRefScriptHash.reference_script_hash), // cborHex
        };
        console.log({ validateScript: validateScript });

        const block = await getLatestBlockInfo();
        const time = block["time"] * 1_000; // ms
        console.log({ time: time });

        const deadline = BigInt(time + 60_000); // +1min
        const datum = Data.to(deadline);
        console.log({ datum: datum });

        const tx = await lucid
          .newTx()
          .payToContract(
            chestAddress,
            { inline: datum, scriptRef: validateScript },
            {
              lovelace: BigInt(42_000000),
              [`${resendableChest.policyID}${resendableChest.assetName}`]:
                BigInt(1),
              [alwaysTrueToken1]: BigInt(1),
              [alwaysTrueToken2]: BigInt(1),
            }
          )
          .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log({ txHash: txHash });

        setActionResult(`TxHash: ${txHash}`);
        return txHash;
      }
      throw { error: "Invalid Lucid State!" };
    } catch (x) {
      setActionResult(JSON.stringify(x));
    }
  };

  return !loaded ? (
    <></>
  ) : (
    <div>
      <div>
        <br />
        <hr />
        <br />
        <div>Mint arbitrary tokens for testing:</div>
        {/* MintTreasures */}
        <button className="btn btn-primary m-5" onClick={mintTreasures}>
          Mint Treasures
        </button>
        <br />
        <br />
        <hr />
        <br />
      </div>

      <div>
        {/* CreateChest */}
        <button className="btn btn-primary m-5" onClick={createChest}>
          Create Chest
        </button>

        {chestAddress?.length ? (
          <>
            {/* AddTreasure */}
            <button className="btn btn-secondary m-5" onClick={addTreasure}>
              Add Treasure
            </button>

            {keyTokenUTxO ? (
              <>
                {/* DelayUnlock */}
                <button className="btn btn-secondary m-5" onClick={delayUnlock}>
                  Delay Unlock
                </button>
              </>
            ) : (
              <></>
            )}

            {/* UnlockChest */}
            <button className="btn btn-secondary m-5" onClick={unlockChest}>
              Unlock Chest
            </button>

            {resendableChest ? (
              <>
                {/* ResendChest */}
                <button className="btn btn-secondary m-5" onClick={resendChest}>
                  Resend Chest
                </button>
              </>
            ) : (
              <></>
            )}

            {/* ChestInfo */}
            <div>{`Current ChestAddress: ${chestAddress}`}</div>
          </>
        ) : (
          <div>I don't remember having any chest currently...</div>
        )}
      </div>
    </div>
  );
};

export default MorbidV2;
